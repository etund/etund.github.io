<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[etund喔喔喔]]></title>
  <link href="http://etund.github.com/atom.xml" rel="self"/>
  <link href="http://etund.github.com/"/>
  <updated>2015-08-22T19:59:09+08:00</updated>
  <id>http://etund.github.com/</id>
  <author>
    <name><![CDATA[etund]]></name>
    <email><![CDATA[a925813235z@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[百思不得姐-项目总结(五)]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-wu/"/>
    <updated>2015-08-22T19:50:39+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-wu</id>
    <content type="html"><![CDATA[<h3>功能模块实现(部分)</h3>

<h5>自定义UITextView</h5>

<ul>
<li>添加内容输入框。

<ul>
<li>内嵌</li>
<li>自定义UITextView

<ul>
<li>占位字符</li>
</ul>
</li>
<li>监听textView的输入值，用于去除占位字符，不能从外面监听，这是可以在内部通过通知的方式来监听。</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><p>细节处理与功能扩展</p>

<ul>
<li>如何动态监测占位字符的改变。</li>
<li>如何动态监测文字大小与颜色。

<ul>
<li><code>setNeedsLayout</code>与<code>setNeedsDisplay</code>的区别

<ul>
<li><code>setNeedsLayout</code>：会在恰当的时刻调用layoutSubviews方法</li>
<li><code>setNeedsDisplay</code>：会在恰当的时刻自动调用drawRect:方法</li>
<li><code>但是上面两个方法在一些操作上有些功能重复</code></li>
<li>想使用KVC来修改该对象的值，就要用该对象来调用KVC
<code>layoutIfNeeded</code>强制布局</li>
</ul>
</li>
</ul>
</li>
<li>如果一进来UITextView就有值呢？(包括有属性的文字与无属性的文字)</li>
</ul>
</li>
<li><p><code>监听UITextView内容的改变用通知，监听UITextField的改变用代理。</code></p></li>
<li>如何在键盘上添加视图

<ul>
<li>方法一

<ul>
<li>添加键盘监听</li>
<li>将view添加到键盘视图上</li>
<li>平移视图</li>
<li>键盘下降视图脱落，添加到主视图上。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h5>标签编辑界面</h5>

<ul>
<li>思路

<ul>
<li>先添加一个UITextField</li>
</ul>
</li>
<li>用UITextField还是UITextView?

<ul>
<li>由于标签比较短，下面还要添加一个按钮，前面要添加UIButton.</li>
<li>那么我们的TextField需要什么功能？

<ul>
<li>占位字符，光标。</li>
<li>实时更新UITextField的宽度。</li>
</ul>
</li>
</ul>
</li>
<li><p>如何触发确认事件</p>

<ul>
<li>包括字符:逗号,空格,回车以及点击下面的标记按钮</li>
<li>接收键盘return键，delete键</li>
</ul>
</li>
<li><p>由于重写UINavigationViewController后不能使用右滑来返回上一层，这是可以讲</p></li>
<li><p>设置一个代理为空。</p></li>
<li><p>数据回显，也就是界面传值:无非四种:block 代理，通知，单例,意思是如何让一个界面的数据在上一个界面显示。</p>

<ul>
<li>这里用block</li>
</ul>
</li>
<li>如何解决界面会跳的时候键盘覆盖原来的控件。

<ul>
<li>这是由于添加键盘监听与设置第一响应者和注销第一响应者的顺序不对。</li>
<li>在注册键盘弹出的时候要注意添加监听和去除监听前后，也就是说，在成为添加键盘监听之后注册第一响应者，在去除键盘监听之前注销第一响应者。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百思不得姐-项目总结(四)]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-si/"/>
    <updated>2015-08-22T19:47:07+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-si</id>
    <content type="html"><![CDATA[<h3>哪些网上找不到的经验(二)</h3>

<ul>
<li>将约束对象翻转

<ul>
<li>这样做可以让父控件随着子控件的变化而变化，而不是子控件随着父控件的变化而变化。</li>
</ul>
</li>
<li>placeholderlabel是懒加载的。

<pre><code>  - 所以利用KVC设置placeholderlabel的颜色属性的时候要placeholderlabel是否为空。
</code></pre></li>
<li>如果我们的控件从xid加载

<ul>
<li>可以在layoutsubview方法里面设置控件尺寸</li>
<li>排布子控件不管是从xib加载还是代码加载都不受控制，可以在layoutsubview里面设置</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li>监听键盘属性变化的时候可以把键盘先退出在重新加载

<ul>
<li>对于监听的添加，以及主动设置第一响应者和注销第一响应者的时候要注意，在view出现的时候添加监听，在消失的时候去除监听，在在监听的去除和添加之间注册和注销第一响应者。也就是在监听添加之后注册第一响应者，在监听去除之前注销第一响应者。</li>
</ul>
</li>
<li>如何在控制器的TabBar中添加按钮

<ul>
<li>可以用KVC替换TabBar然后在TabBar里面处理控件尺寸</li>
</ul>
</li>
<li>如何让图片与文字不受渲染

<ul>
<li>图片可以用[image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]来设置</li>
<li>文字属性可以在initialize方法里面设置，有Appearance宏的属性都可以统一设置</li>
</ul>
</li>
<li>为什么在layoutSubviews里面调用dipatch_once会失败

<ul>
<li>由于static关键字</li>
</ul>
</li>
<li>当同时多次点击添加按钮的时候会出现多次添加控制器

<ul>
<li>这是动画的造成的bug，(参考我的另外一篇博客，UINavigation日常)</li>
</ul>
</li>
<li>返回数据照片会使cell的tableView变化

<ul>
<li>只要设置了placeholder图片返回的图片绝对不会变化</li>
</ul>
</li>
<li>如何解决网络慢带来的问题

<ul>
<li>在每次点击的时候马上刷新数据</li>
</ul>
</li>
<li>让用户不要一直发请求

<ul>
<li>在分类里面把数据存储起来，判断是否要发请求。</li>
</ul>
</li>
<li>下拉刷新

<ul>
<li>由于刷新，所以每次刷新要去服务器取首页数据，把以前的数据清除掉。</li>
<li>由于每次都要上拉/下拉刷新，所以不需要判断是否有数据</li>
<li>由于每次都是要点击到其他页面才下拉刷新，所以原则上是不需要判断当前的传进去的参数与self的参数是否一致，但是以防万一数据传输过慢还是加上好。</li>
<li>不用每次刷新右控件都去检查上拉刷新</li>
<li>但是右边每次reloadData的时候都要检查是否已经加载完</li>
</ul>
</li>
<li>如何让TextField的文字显示为白色。

<ul>
<li> 可以通过attributePlaceHolder来实现</li>
<li> 可以通过kvc来实现</li>
</ul>
</li>
<li>如何让tableView显示在窗口的中间。

<ul>
<li>可以设置contentInset</li>
</ul>
</li>
<li>如何解决cell重用图片重叠的问题

<ul>
<li>原因不详：</li>
<li>解决方法，在每次添加imageView的时候移除出父控件就好。</li>
<li>每种数据样式都要把其他样式的图片给隐藏掉。</li>
</ul>
</li>
<li>如何解决刷新的时候上拉与下拉同时进行？

<ul>
<li>可以保证下拉和下拉只有一个进行，在下拉之前停了上拉，在下拉之前停掉上拉。</li>
</ul>
</li>
<li>如何快速设置已经有背景图片的按钮的大小

<ul>
<li>把button的大小设为背景图片的大小即可。</li>
<li>button.currentImage</li>
</ul>
</li>
<li>如何解决界面会跳的时候键盘覆盖原来的控件。

<ul>
<li>这是由于添加键盘监听与设置第一响应者和注销第一响应者的顺序不对。</li>
<li>在注册键盘弹出的时候要注意添加监听和去除监听前后，也就是说，在成为添加键盘监听之后注册第一响应者，在去除键盘监听之前注销第一响应者。</li>
</ul>
</li>
<li>建议用数组来代替if-else,表驱动法</li>
<li>tabelView不分组的问题？tableView分组一定要设置grop样式吗？

<ul>
<li>实现tableView的代理方法viewForHeaderInSection，要向这个方法有效，必须实现heightForHeaderInSection或者设置tableView的样式为group。</li>
</ul>
</li>
<li>如何不占内存的给项目添加圆角？

<ul>
<li>利用画图知识。</li>
</ul>
</li>
<li>用pop框架做动画，在开始之前view会默认处于默认位置。</li>
<li>换肤

<ul>
<li>设计模式

<ul>
<li>plist - 皮肤文件夹 - plist - 图片</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百思不得姐-项目总结(三)]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-san/"/>
    <updated>2015-08-22T19:26:47+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-san</id>
    <content type="html"><![CDATA[<h3>哪些网上找不到的经验(一)</h3>

<ul>
<li>[UIColor colorWithPatternImage:]设置颜色跟图片一致</li>
<li>属性后面有Appearance宏，都可以通过Appearance统一设置，例如：UITabarItem</li>
<li>在分类中声明Property，只会声明方法声明，不会生成方法的实现和下划线属性。</li>
<li>用imageView的initWithImage图片尺寸会与imageView一样</li>
<li>如果navbarItem里面是文件，那么item接受事件，如果是Button，那么改button接收事件</li>
<li>按住Option加回车，UILabel可以换行</li>
</ul>


<!-- more -->


<ul>
<li>判断是否第一次上拉刷新是否时已经下载完了- - 在另外一个请求发送之前把上一次请求取消

<ul>
<li>调用[self.manager.tasks makeObjectsPerformSelector:@selector(cancel)];</li>
</ul>
</li>
<li>cell空出间隔

<ul>
<li>重写cell的setFrame的值，在本身的身上加上对应的空格。</li>
<li>自定义UIView</li>
</ul>
</li>
<li>如果不想别人修改我们的frame，我们可以重写setFrame和setbounds方法,例如一些控件：UISegument。</li>
<li>从iOS7开始不再通过Application来控制状态栏，而是通过控制器来控制。

<ul>
<li>默认是通过控制器来控制状态栏的，但是可以在配置文件里面重新设置。</li>
</ul>
</li>
<li>如果指针指向数组的首元素吧指针当做数组来使用。</li>
<li>滚动条内边距

<ul>
<li> 设置tableView的self.tableView.separatorInset方法。</li>
</ul>
</li>
<li>(MJExtension)header的autoChangeAlpha属性可以设置它自动改变透明度，这样适用于我们上部控件是透明的而遮盖不了后面的header的问题。</li>
<li>没初始化的NSInteger为0</li>
<li>如果把系统帮你生成的set方法和get方法重写，会报错，因为它不会帮你生产下划线属性。

<ul>
<li>如果是readonly的，重写get方法后，也不会帮我们自动生成下划线属性，</li>
<li>简而言之，如果把property默认帮你实现的方法都重写了，那么，好吧，你那么厉害，私有属性也自己写咯，property如是说。</li>
</ul>
</li>
<li>当属性与返回数据的名字不一样的时候(MJExtension)

<ul>
<li>一般做法是在属性的实现方法做重写+ (NSDictionary *)replacedKeyFromPropertyName;方法</li>
</ul>
</li>
<li>可以在xib里面给按钮的title和imgae之间添加间隔

<ul>
<li>利用contentEdginset</li>
</ul>
</li>
<li>对于UIImageView的布局属性

<ul>
<li>fit保证看到图片全部，按照原来的宽高比进行缩放</li>
<li>fill会缩小到宽度或者高度跟imageView一样为止</li>
</ul>
</li>
<li>如果遇到要不断更改第三方框架，最好是新建一个类来继承第三方框架类。

<ul>
<li>例如进度条框架。</li>
</ul>
</li>
<li>进度条负号解决，直接替换掉-号</li>
<li>sdWebImage的下载进度是用字典存放的，key是url，value是下载operation，所以不会重复加载</li>
<li>如何保证在cell循环的时候，进度值的问题</li>
<li>把操作存储起来</li>
<li>代码实现</li>
</ul>


<pre><code class="objc"></code></pre>

<ul>
<li>版本号：0.0.0 大版本号， 功能版本号，bug版本号</li>
<li>(项目打包)第三方框架图片资源依赖

<ul>
<li>放在一个文件夹里面，后缀名是bundle</li>
<li>当加载资源的时候加上文件夹路径</li>
</ul>
</li>
<li>如何做透明动画过程中而后面的画面不能跟后面的界面交互，问题的起因是由于当我们做动画的时候要让整个view都不能接收点击事件，但我们不能接收点击事件的时候后面的controller就会接受事件，这不是我们想要的。(facebook的框架)

<ul>
<li>我们也可以让view的所有子控件在做动画过程中全部调用一个方法(不与用户交互),就可以把在控件做动画的时候后面的view后滑动的bug</li>
<li>做透明界面可以用View跟窗口</li>
<li>如何挡住状态栏，可以参考Window的级别
-sd_image有按钮专用的图片下载方法</li>
<li>给按钮设置image的时候，用专用的sd_image方法</li>
</ul>
</li>
<li>让button文字居中显示

<ul>
<li>btn.titleLabel.textAlignment = NSTextAlignmentCenter;</li>
<li>图片居中</li>
<li>内容居中 contenViewMode</li>
<li>水平居中 UIControlContentHorizontalAlignment</li>
<li>垂直居中 UIControlContentVerticalAlignment</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百思不得姐-项目总结(二)]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-er/"/>
    <updated>2015-08-22T19:08:55+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-er</id>
    <content type="html"><![CDATA[<h3>小技巧(二)</h3>

<h4>双击菜单栏回到顶部？点击屏幕顶部回到最上面？</h4>

<ul>
<li><p>在整个应用启动的时候在应用顶部添加一个window用于点击，然后再监听这个window的点击事件。</p></li>
<li><p>自己自顶一个而一个类，继承window或者NSObject都行，然后定义一个window_成员变量。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">window_</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">window_</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ETScreenW</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">window_</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelAlert</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">window_</span> <span class="nl">addGestureRecognizer</span><span class="p">:[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">windowClick</span><span class="p">)]];</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<ul>
<li>把全部scrollView寻找出来，在判断是否是当前界面显示的，把scrollView滑到顶部</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//寻找全部的scrollView</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">searchScrollViewInView:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">superView</span><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="n">scroView</span> <span class="k">in</span> <span class="n">superView</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">scroView</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UIScrollView</span> <span class="k">class</span><span class="p">]]</span><span class="o">&amp;&amp;</span><span class="n">scroView</span><span class="p">.</span><span class="n">isShowingOnCurrentWindow</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">CGPoint</span> <span class="n">offSet</span> <span class="o">=</span> <span class="n">scroView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">;</span>
</span><span class='line'>            <span class="n">offSet</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="n">scroView</span><span class="p">.</span><span class="n">contentInset</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">scroView</span> <span class="nl">setContentOffset</span><span class="p">:</span><span class="n">offSet</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">searchScrollViewInView</span><span class="p">:</span><span class="n">scroView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//判断是否是当前屏幕正在显示的view</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isShowingOnCurrentWindow</span><span class="p">{</span>
</span><span class='line'><span class="c1">//   一主窗口左上角为坐标原点，计算self的矩形框</span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">newFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">ETKeyWindow</span> <span class="nl">convertRect</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">frame</span> <span class="nl">fromView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">superview</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">winBounds</span> <span class="o">=</span> <span class="n">ETKeyWindow</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'><span class="c1">//    主窗口的bouns 和self的矩形框 是否有重叠</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">insterects</span> <span class="o">=</span>  <span class="n">CGRectIntersectsRect</span><span class="p">(</span><span class="n">newFrame</span><span class="p">,</span> <span class="n">winBounds</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">alpha</span> <span class="o">&gt;</span> <span class="mf">0.01</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">==</span><span class="n">ETKeyWindow</span> <span class="o">&amp;&amp;</span> <span class="n">insterects</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>至于怎么双击当前底部菜单栏然后刷新页面，可以把菜单栏点击的时候记录当次点击的菜单栏，下一次在点击的时候判断是否是上一次的菜单栏，然后调用开始刷新的方法。(这个需求实现与上面方法不同的是，这个不需要获取scroolView)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    在通知中心注册通知</span>
</span><span class='line'>    <span class="p">[</span><span class="n">ETDefaultNotificationCenter</span> <span class="nl">postNotificationName</span><span class="p">:</span><span class="n">ETTabBarDidSelectNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//       接收通知</span>
</span><span class='line'><span class="p">[</span><span class="n">ETDefaultNotificationCenter</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">tabBarClick</span><span class="p">)</span> <span class="nl">name</span><span class="p">:</span><span class="n">ETTabBarDidSelectNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//       开始滚</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">lasetSelectIndex</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">tabBarController</span><span class="p">.</span><span class="n">selectedIndex</span><span class="o">&amp;&amp;</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">isShowingOnCurrentWindow</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">header</span> <span class="n">beginRefreshing</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">lasetSelectIndex</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">tabBarController</span><span class="p">.</span><span class="n">selectedIndex</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>需求场景</h4>

<ul>
<li>(场景1.0)有这么一个需求，要在一个view的子控件modal一个带有导航栏的控制器，

<ul>
<li>解决方案：获取keyWindow的根控制器，再modal一个带有控制器的导航控制器即可</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">keyWindow</span><span class="p">.</span><span class="n">rootViewController</span> <span class="nl">presentViewController</span><span class="p">:[[</span><span class="n">ETNavContioller</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithRootViewController</span><span class="p">:[[</span><span class="n">ETPublishController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]]</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>(场景1.1)如何在一个已经modal出来的导航控制器的的跟控制器里面的一个子控制器里面push一个控制器。

<ul>
<li>知识拓展：一旦A控制器modal出B控制器，那么A的preferenceControlled就会引用着B控制器,所以可以这样做，获取当前的导航控制器，然后再获取他的presentedViewController</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    获取keyWindow的keyWindow</span>
</span><span class='line'>    <span class="bp">UIViewController</span> <span class="o">*</span><span class="n">keyRootVC</span> <span class="o">=</span> <span class="n">ETKeyWindow</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">;</span>
</span><span class='line'><span class="c1">//    获取keyWindowmodel出的导航栏控制器</span>
</span><span class='line'>    <span class="n">ETNavContioller</span> <span class="o">*</span><span class="n">nav</span> <span class="o">=</span> <span class="p">(</span><span class="n">ETNavContioller</span> <span class="o">*</span><span class="p">)</span><span class="n">keyRootVC</span><span class="p">.</span><span class="n">presentedViewController</span><span class="p">;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>    <span class="n">ETTagEditController</span> <span class="o">*</span><span class="n">tagEditVC</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ETTagEditController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">nav</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">tagEditVC</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>(场景2)如果返回的图太大，我们就要定住他的宽度，然后再根据比例把它的高计算出来，但是如果计算出来的高度也太高了，我们就要显示他的顶部的一部分，但是如果把一张长图，在一个cell里面显示指定位置的一部分，这时就需要画图技术。

<ul>
<li>把截图想象成一个窗口，窗口后面是我们想要看到的一幅画，我们想看到画的哪里，只能挪动窗口后面的画，                <code>UIGraphicsBeginImageContextWithOptions(_data.pictureF.size, YES, 0.0);</code>这句代码就是设置我们的窗口大小以及其他属性，                <code>[currentImage drawInRect:CGRectMake(0, 0, _data.pictureF.size.width,picH)];</code>而这句话是设置图片哪个位置显示在窗口上面。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="bp">UIImage</span> <span class="o">*</span><span class="n">currentImage</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">contentPic</span><span class="p">.</span><span class="n">image</span><span class="p">;</span>
</span><span class='line'> <span class="n">CGFloat</span> <span class="n">picH</span> <span class="o">=</span> <span class="n">_data</span><span class="p">.</span><span class="n">pictureF</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">_data</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="n">_data</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>                <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">_data</span><span class="p">.</span><span class="n">pictureF</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>                <span class="p">[</span><span class="n">currentImage</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_data</span><span class="p">.</span><span class="n">pictureF</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="n">picH</span><span class="p">)];</span>
</span><span class='line'>                <span class="n">currentImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>                <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">contentPic</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">currentImage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>小结：UIGraphicsBeginImageContextWithOptions(决定显示大小)，drawInRect:CGRectMake决定显示图片的一部分在窗口上。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百思不得姐-项目总结(一)]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-%5B%3F%5D/"/>
    <updated>2015-08-22T18:54:55+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/bai-si-bu-de-jie-xiang-mu-zong-jie-[?]</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<ul>
<li>项目不同一般的小例子，不仅仅是知识的回顾，还是工程的封装，编程的思想，经验的总结，更多小技巧就是在项目里面摸索出来的，当然有前辈带你最好了，所以在这里感谢<a href="http://www.520it.com/index.htm">小码哥</a>的李明杰老师讲的这个小项目，我再这个项目中受益匪浅，趁现在还没忘记赶紧记下来，成为我自己的东西。</li>
<li>这个项目是一个段子类的项目，百思不得姐，一个段子软件，具体情况自己下载来玩吧。</li>
</ul>


<!-- more -->


<h3>小技巧(一)</h3>

<h4>自定义导航栏注意的地方</h4>

<ul>
<li>在iOS7之后，当我们的收在左边最边边开始往右划的时候会实现返回功能，但是当我们自定义导航栏的返回按钮的时候这个功能就会失去，这时候我们只需要可以把这样设置就好了<code>self.interactivePopGestureRecognizer.delegate = nil;</code></li>
<li>但是这样会出现在我们返回到第一个控制器的时候，在往右滑，在点击跳转，跳转不过去，解决方案

<ul>
<li>在pushViewController:animated:方法的时候设置代理的等于当前控制器是否是根控制器。</li>
<li>然后成为导航控制器的代理，然后实现其代理方法navigationController:didShowViewController:animated:在里面设置代理等于当前控制器是否是根控制器</li>
<li>核心代码</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">1</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">popDelegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'>   <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">navigationController</span><span class="p">:(</span><span class="bp">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="n">navigationController</span> <span class="nl">didShowViewController</span><span class="p">:(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">viewController</span> <span class="o">==</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">viewControllers</span> <span class="n">firstObject</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">popDelegate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这时我们可以有更高的要求，例如我们想自定义手势，因为系统自带的手势只能从左边边界开始划，但是自定义手势的时候我们也要跟上面一样判断什么时候响应手势的触发</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">在</span><span class="n">viewDidLoad</span><span class="err">里面</span>
</span><span class='line'><span class="bp">UIPanGestureRecognizer</span> <span class="o">*</span><span class="n">pan</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleNavigationTransition</span><span class="p">:)];</span>
</span><span class='line'>    <span class="n">pan</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">pan</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="err">在代理方法里面</span>
</span><span class='line'><span class="cp">#pragma UIGestureRecognizerDelegate</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizerShouldBegin</span><span class="p">:(</span><span class="bp">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span><span class="p">{</span>
</span><span class='line'><span class="c1">//    当当前控制器不是根控制器的时候可以接收</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">topViewController</span> <span class="o">!=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">viewControllers</span> <span class="n">firstObject</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>时间比较</h4>

<ul>
<li>时间处理

<ul>
<li>目标：刚刚 一小时内 几时几分  昨天几时几分 几月几号几时几分 几年几月几号几时几分</li>
<li>概要：是否是今年 是否是昨天 是否是今天 是否是一个小时外 是否是一分钟外</li>
<li>优先级判断

<ul>
<li>判断是否是今年 ：年份一样？今年：去年</li>
<li>判断是否是昨天：年份一样，月份一样或相差一个月，天数相差一天或一个月</li>
<li>判断是否是今天：年份一样，月份一样，日期一样</li>
<li>判断是否是一个小时内？年份一样，月份一样，日期一样，时一样</li>
<li>判断是否是一分钟内：年份一样，月份一样，日期一样，时一样，分钟一样</li>
</ul>
</li>
<li>如何判断时间一样？

<ul>
<li>利用NSCalendar的方法来比较</li>
</ul>
</li>
<li>列几个代码</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//判断是否是今天</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isTody</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSDateFormatter</span> <span class="o">*</span><span class="n">dfm</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">dfm</span><span class="p">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">@&quot;yyyy-MM-dd&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">selfDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">dfm</span> <span class="nl">stringFromDate</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">nowDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">dfm</span> <span class="nl">stringFromDate</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">selfDate</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">nowDate</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//判断是否是今年</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isThisYear</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">nowYear</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">component</span><span class="p">:</span><span class="n">NSCalendarUnitYear</span> <span class="nl">fromDate</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]];</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">selfYear</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">component</span><span class="p">:</span><span class="n">NSCalendarUnitYear</span> <span class="nl">fromDate</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nowYear</span> <span class="o">==</span> <span class="n">selfYear</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//是否是昨天</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isYesterday</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSDateFormatter</span> <span class="o">*</span><span class="n">dfm</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">dfm</span><span class="p">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">@&quot;yyyy-MM-dd&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">selfDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">dfm</span> <span class="nl">dateFromString</span><span class="p">:[</span><span class="n">dfm</span> <span class="nl">stringFromDate</span><span class="p">:</span><span class="nb">self</span><span class="p">]];</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">nowDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">dfm</span> <span class="nl">dateFromString</span><span class="p">:[</span><span class="n">dfm</span> <span class="nl">stringFromDate</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSDateComponents</span> <span class="o">*</span><span class="n">contents</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">components</span><span class="p">:</span><span class="n">NSCalendarUnitYear</span><span class="o">|</span><span class="n">NSCalendarUnitMonth</span><span class="o">|</span><span class="n">NSCalendarUnitDay</span> <span class="nl">fromDate</span><span class="p">:</span><span class="n">selfDate</span> <span class="nl">toDate</span><span class="p">:</span><span class="n">nowDate</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">contents</span><span class="p">.</span><span class="n">year</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">contents</span><span class="p">.</span><span class="n">month</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">contents</span><span class="p">.</span><span class="n">day</span><span class="o">==</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>知道是否是今年，或者今天等等后，还要返回具体要显示什么内容</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//获取时间差</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSDateComponents</span> <span class="o">*</span><span class="p">)</span><span class="nf">getShortDateComponents</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSDateFormatter</span> <span class="o">*</span><span class="n">dfm</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">dfm</span><span class="p">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">@&quot;yyyy-MM-dd HH:mm&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dfm</span><span class="p">.</span><span class="n">timeZone</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTimeZone</span> <span class="nl">timeZoneWithName</span><span class="p">:</span><span class="s">@&quot;Etc/GMT+8&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">nowDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">dfm</span> <span class="nl">dateFromString</span><span class="p">:[</span><span class="n">dfm</span> <span class="nl">stringFromDate</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]]];</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">selfDate</span>  <span class="o">=</span> <span class="p">[</span><span class="n">dfm</span> <span class="nl">dateFromString</span><span class="p">:[</span><span class="n">dfm</span> <span class="nl">stringFromDate</span><span class="p">:</span><span class="nb">self</span><span class="p">]];</span>
</span><span class='line'>    <span class="bp">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">components</span><span class="p">:</span><span class="n">NSCalendarUnitYear</span><span class="o">|</span><span class="n">NSCalendarUnitMonth</span><span class="o">|</span><span class="n">NSCalendarUnitDay</span><span class="o">|</span><span class="n">NSCalendarUnitHour</span><span class="o">|</span><span class="n">NSCalendarUnitMinute</span> <span class="nl">fromDate</span><span class="p">:</span><span class="n">selfDate</span> <span class="nl">toDate</span><span class="p">:</span><span class="n">nowDate</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;未完待续</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QQ音乐总结]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/qqyin-le-zong-jie/"/>
    <updated>2015-08-22T14:40:29+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/qqyin-le-zong-jie</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<ul>
<li>对于项目，有些细节以及小技巧是网上很难表达的，也很难找到，这需要经验的积累，如果有某些有经验的开发人员教你一些小技巧，经验心得，一定要总结，这样就可以少走很多弯路，所以很感谢<a href="http://www.520it.com/index.htm">小码哥</a>的老师。</li>
<li>多媒体有别于我们一般的接触的项目，一切都值得记录。</li>
</ul>


<!-- more -->


<h4>小技巧</h4>

<ul>
<li>蒙版实现(实现方式可以利用第三方框架，也可以用ToolBar实现，这里用ToolBar)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIToolbar</span> <span class="o">*</span><span class="n">toolBar</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIToolbar</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">toolBar</span> <span class="nl">setBarStyle</span><span class="p">:</span><span class="n">UIBarStyleBlack</span><span class="p">];</span>
</span><span class='line'><span class="n">toolBar</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">backgrounImgeView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">toolBar</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">toolBar</span> <span class="nl">makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">edges</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">backgrounImgeView</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>动画开始或暂停

<ul>
<li>两个CALayer的分类(可以把核心动画在不移除的情况下暂停或开始)</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pauseAnimate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">CFTimeInterval</span> <span class="n">pausedTime</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">convertTime</span><span class="p">:</span><span class="n">CACurrentMediaTime</span><span class="p">()</span> <span class="nl">fromLayer</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">timeOffset</span> <span class="o">=</span> <span class="n">pausedTime</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resumeAnimate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">CFTimeInterval</span> <span class="n">pausedTime</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">timeOffset</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">timeOffset</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">beginTime</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'><span class="n">CFTimeInterval</span> <span class="n">timeSincePause</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">convertTime</span><span class="p">:</span><span class="n">CACurrentMediaTime</span><span class="p">()</span> <span class="nl">fromLayer</span><span class="p">:</span><span class="nb">nil</span><span class="p">]</span> <span class="o">-</span> <span class="n">pausedTime</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">beginTime</span> <span class="o">=</span> <span class="n">timeSincePause</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>由于某些数据是在多个类都可以用到，所以，这里可以把一个工具类作为传输数据的桥梁，可以在一定程度上较少代码冗余。</li>
<li>歌词染色

<ul>
<li>在歌曲播放过程中，我们需要监听歌曲播放到哪里然后把一句歌词的部分高亮，如果之前没有接触过的话，直接想不到了。</li>
<li>这是我们可以自定义歌词label，然后再重写draw in rect的方法，根据传入的播放进度来染色，主要代码如下。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setProgress:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">progress</span><span class="p">{</span>
</span><span class='line'>    <span class="n">_progress</span> <span class="o">=</span> <span class="n">progress</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">drawRect</span><span class="p">:</span><span class="n">rect</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    获取需要画的区域</span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">fillRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="nb">self</span><span class="p">.</span><span class="n">progress</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="c1">//    设置颜色</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">]</span> <span class="n">set</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    添加区域</span>
</span><span class='line'>    <span class="n">UIRectFillUsingBlendMode</span><span class="p">(</span><span class="n">fillRect</span><span class="p">,</span> <span class="n">kCGBlendModeSourceIn</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIRectFillUsingBlendMode这个方法第一个参数的填充的方式，而第二个参数是填充的颜色的方式，解释如下</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* Available in Mac OS X 10.5 &amp; later. R, S, and D are, respectively,</span>
</span><span class='line'><span class="cm">       premultiplied result, source, and destination colors with alpha; Ra,</span>
</span><span class='line'><span class="cm">       Sa, and Da are the alpha components of these colors.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">       The Porter-Duff &quot;source over&quot; mode is called `kCGBlendModeNormal&#39;:</span>
</span><span class='line'><span class="cm">         R = S + D*(1 - Sa)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">       Note that the Porter-Duff &quot;XOR&quot; mode is only titularly related to the</span>
</span><span class='line'><span class="cm">       classical bitmap XOR operation (which is unsupported by</span>
</span><span class='line'><span class="cm">       CoreGraphics). */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">kCGBlendModeClear</span><span class="p">,</span>          <span class="cm">/* R = 0 */</span>
</span><span class='line'>    <span class="n">kCGBlendModeCopy</span><span class="p">,</span>           <span class="cm">/* R = S */</span>
</span><span class='line'>    <span class="n">kCGBlendModeSourceIn</span><span class="p">,</span>       <span class="cm">/* R = S*Da */</span>
</span><span class='line'>    <span class="n">kCGBlendModeSourceOut</span><span class="p">,</span>      <span class="cm">/* R = S*(1 - Da) */</span>
</span><span class='line'>    <span class="n">kCGBlendModeSourceAtop</span><span class="p">,</span>     <span class="cm">/* R = S*Da + D*(1 - Sa) */</span>
</span><span class='line'>    <span class="n">kCGBlendModeDestinationOver</span><span class="p">,</span>    <span class="cm">/* R = S*(1 - Da) + D */</span>
</span><span class='line'>    <span class="n">kCGBlendModeDestinationIn</span><span class="p">,</span>      <span class="cm">/* R = D*Sa */</span>
</span><span class='line'>    <span class="n">kCGBlendModeDestinationOut</span><span class="p">,</span>     <span class="cm">/* R = D*(1 - Sa) */</span>
</span><span class='line'>    <span class="n">kCGBlendModeDestinationAtop</span><span class="p">,</span>    <span class="cm">/* R = S*(1 - Da) + D*Sa */</span>
</span><span class='line'>    <span class="n">kCGBlendModeXOR</span><span class="p">,</span>            <span class="cm">/* R = S*(1 - Da) + D*(1 - Sa) */</span>
</span><span class='line'>    <span class="n">kCGBlendModePlusDarker</span><span class="p">,</span>     <span class="cm">/* R = MAX(0, (1 - D) + (1 - S)) */</span>
</span><span class='line'>    <span class="n">kCGBlendModePlusLighter</span>        <span class="cm">/* R = MIN(1, S + D) */</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面解释大概的意思就是：R表示计算结果，S：表示包含alpha的源颜色,D表示包含alpha的目标颜色，Sa  Da 分别是对应颜色的alpha值，每个枚举后面是计算的公式，先简单记一下吧，以后在深入研究。</li>
</ul>


<h4>开始播放</h4>

<p><code>我的主要思路如下</code></p>

<ul>
<li>界面更新

<ul>
<li>时间的变化时时更新</li>
<li>歌曲名字,歌手名字，图片，只更新一遍</li>
</ul>
</li>
<li>滑条的变化

<ul>
<li>如何让滑条的变化来控制歌曲的播放进度？

<ul>
<li>获取滑条的变化。</li>
<li>控制歌曲的进度。</li>
</ul>
</li>
</ul>
</li>
<li>监听歌词的变化

<ul>
<li>UIScrollVie约束实现原则

<ul>
<li>scrollView必须有宽高和位置(也就是四重奏)</li>
<li>然后按照正常人的四维约束scrollView的子控件，但是子控件必须包含宽高</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>遇到问题</h4>

<ul>
<li>AVAudioPlayer的底层实现会内存泄露</li>
<li>为什么调用prepareToPlay出现断点？(在添加全局断点的时候就会出现断点)

<pre><code>  - 现在分析一下代码如下
</code></pre></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="bp">AVAudioPlayer</span> <span class="o">*</span><span class="n">player</span>  <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="n">player</span> <span class="o">=</span> <span class="n">_players</span><span class="p">[</span><span class="n">musicName</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">player</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource</span><span class="p">:</span><span class="n">musicName</span> <span class="nl">withExtension</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">url</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">player</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVAudioPlayer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL</span><span class="p">:</span><span class="n">url</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_players</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">player</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">musicName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">player</span> <span class="n">prepareToPlay</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="n">player</span> <span class="n">play</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>现在情况是player不为空且正确，但是调用prepareToPlay方法的时候就会停留在这里并且停5次，但是<code>if (player == nil)</code>外面只执行一次，但是为什么会这样呢？那只能说明这个方法有问题了，于是我把全局断点只监听OC代码块的，像这样。</p>

<p>  <img src="http://etund.github.com/images/blog/qqyinyuebofangqi/Snip20150821_3.png" alt="" />
  <img src="http://etund.github.com/images/blog/qqyinyuebofangqi/Snip20150821_4.png" alt="" />
  <img src="http://etund.github.com/images/blog/qqyinyuebofangqi/Snip20150821_6.png" alt="" /></p></li>
<li><p>这样问题就解决了，于是乎，我又试着监听C++代码块的，果然问题又出现了，啊，C++这东西在苹果对于我们基本上是不可见了，但它底层实现有问题啊，额&hellip;，这样的话，我们就要试着寻求新的播放框架了.<code>值得一提的是后面调用这个实例的stop方法也会出现类似情况</code></p></li>
<li>之后用instruments内存分析，发现的确存在内存泄露，内存泄露的问题出在底层内部，不懂，如下图
  <img src="http://etund.github.com/images/blog/qqyinyuebofangqi/Snip20150821_2.png" alt="" /></li>
</ul>


<h4>音乐控制歌词</h4>

<ul>
<li><p>歌词解析</p>

<ul>
<li>从文件里面加载数据</li>
<li>把数据分割为一行一行作为一个对象</li>
<li>把一行一行分割成属性</li>
<li>获取当前的时间</li>
<li>对比模型的时间，如果大于当前时间小于下一个时间，或者下一行为空，显示当前行，刷新当前行和上一上，滚到对应的歌词</li>
<li>对比歌词</li>
</ul>
</li>
<li><p>歌词美化</p>

<ul>
<li>获取单行的播放进度</li>
<li>上色，放大

<ul>
<li>当我们给歌词上色的时候，会出现重用cell的时候，cell重复的没有褪色？

<ul>
<li>tableView的数据源方法返回cell的时候，判断cell的是否是当前要显示的行，来让cell退色。</li>
</ul>
</li>
<li>但是这里歌词会卡顿，那是因为定时器的设的时间跟监听歌播放时间的定时器一样是一秒，太长了，所以这里要单独给歌词添加一个定时器。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>锁屏显示</h4>

<ul>
<li>数据获取

<ul>
<li> (歌词)获取icon，获取前一句歌词，下一句歌词，当前歌词，然后画图，</li>
</ul>
</li>
<li>显示歌名，背景图

<ul>
<li>在设置界面的Capabilities里面开启后台模式，并且选择后台播放音频
<img src="http://etund.github.com/images/blog/qqyinyuebofangqi/Snip20150821_5.png" alt="" /></li>
<li>在代理(AppDelegate)里面添加激活会话</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'><span class="c1">//    获取音频回话</span>
</span><span class='line'>    <span class="bp">AVAudioSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVAudioSession</span> <span class="n">sharedInstance</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    设置后台播放类别</span>
</span><span class='line'>    <span class="p">[</span><span class="n">session</span> <span class="nl">setCategory</span><span class="p">:</span><span class="n">AVAudioSessionCategoryPlayback</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    激活会话</span>
</span><span class='line'>    <span class="p">[</span><span class="n">session</span> <span class="nl">setActive</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>其他</h4>

<ul>
<li><p>傻傻分不清stringWithContentsOfFile:usedEncoding:error: 与 stringWithContentsOfFile:encoding:error:</p>

<ul>
<li>stringWithContentsOfFile:usedEncoding:error:这个方法是智能判断一段字符串使用什么编码，而usedEncoding是要我们存进一个内存地址，用于存放它的真实编码方式，我们可以通过后续打印这个参数来看看它真实的编码方式</li>
<li>stringWithContentsOfFile:encoding:error:这个方法是我们已经知道了这个编码方式，要他必须按照我们的编码方式来解码。</li>
</ul>
</li>
<li><p>componentsSeparatedByString:这个方法用于切割歌词按照一个分割来分割字符串并返回分割后的字符串的数组。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅拷贝与深拷贝]]></title>
    <link href="http://etund.github.com/blog/2015/08/22/qian-kao-bei-yu-shen-kao-bei/"/>
    <updated>2015-08-22T14:15:33+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/22/qian-kao-bei-yu-shen-kao-bei</id>
    <content type="html"><![CDATA[<h4>深拷贝与浅拷贝</h4>

<ul>
<li>浅拷贝是指针拷贝，深拷贝是内容拷贝</li>
<li>产生新对象的时深拷贝，不产生新对象的时浅拷贝</li>
<li><p>浅拷贝只是对对象的简单拷贝，让几个对象公用一片内存，当内存销毁的时候，只想这片内存的额几个指针需要重新定义才可以使用，要不然会变成野指针。</p></li>
<li><p>NString与copy(不产生新对象，浅拷贝，指针拷贝)</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">@&quot;00000000000&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">str_0</span> <span class="o">=</span> <span class="p">[</span><span class="n">str</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p---------%p&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">,</span><span class="n">str_0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/**输出结果</span>
</span><span class='line'><span class="cm">2015-08-22 12:42:24.992 Text[1143:32063] 0x10128c7d0---------0x10128c7d0</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<ul>
<li>NString与mutableCopy(产生新对象，深拷贝，内容拷贝)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">@&quot;00000000000&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">str_0</span> <span class="o">=</span> <span class="p">[</span><span class="n">str</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p---------%p&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">,</span><span class="n">str_0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/**输出结果</span>
</span><span class='line'><span class="cm">2015-08-22 12:44:39.582 Text[1183:33573] 0x1042cb7d0---------0x7f9bf401a910</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>NSMutableString与copy(产生新对象，深拷贝，内容拷贝)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="s">@&quot;-----------&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">str_0</span> <span class="o">=</span> <span class="p">[</span><span class="n">str</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p---------%p&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">,</span><span class="n">str_0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/**输出结果</span>
</span><span class='line'><span class="cm">2015-08-22 12:47:06.886 Text[1219:34965] 0x7fa5e26107d0---------0x7fa5e260fc00</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>NSMutableString与copy(产生新对象，深拷贝，内容拷贝)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="s">@&quot;-----------&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">str_0</span> <span class="o">=</span> <span class="p">[</span><span class="n">str</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p---------%p&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">,</span><span class="n">str_0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/**输出结果</span>
</span><span class='line'><span class="cm">2015-08-22 12:48:26.251 Text[1247:36136] 0x7f8450725d40---------0x7f8450738150</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>小结：

<ul>
<li>NS<em> 调用copy方法是浅拷贝，调用mutableCopy方法是深拷贝，NSMutable</em> 调用mutableCopy和copy是深拷贝。</li>
<li>浅拷贝，在ARC中，由于自动管理内存，使用retain关键字进行引用计数，就是一种更加保险的浅拷贝，它既让几个指针共用同一片内存空间，又可以在release由于计数的存在，不会轻易的销毁内存，达到更加建档使用的目的</li>
<li>深拷贝是指拷贝对象的具体内容，而内存地址是自主分配的，拷贝结束之后，两个对象虽然存在的值是相同的，但内存地址不一样，两个对象也互不影响，互补干涉。</li>
</ul>
</li>
</ul>


<p><img src="http://etund.github.com/images/blog/qiancopyyushenkaobei/Snip20150822_2.png" alt="" /></p>

<h4>拷贝构造</h4>

<ul>
<li>在ios中不不是所有的对象原始就支持copy和mutableCopy，即使你可以调用这个方法且编译通过，但是在运行的时候会提示找不到方法copywithzone 或者 mutableCopyWithZone。所以如果其他类也想实现深拷贝或者浅拷贝的时候，要遵循NSMutableCopying或者NSCopying协议并且实现copyWithZone或者mutableCopyWithZone方法来实现深拷贝或浅拷贝。</li>
<li>举个栗子

<ul>
<li>没有实现copying的时候对AClass的实例进行copy,编译通过,但是运行报错
<img src="http://etund.github.com/images/blog/qiancopyyushenkaobei/Snip20150822_1.png" alt="" /></li>
<li>接下来我们来继承NSCopying协议并且实现对应的方法</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span><span class="p">{</span>
</span><span class='line'>    <span class="n">AClass</span> <span class="o">*</span><span class="n">aclass</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>    <span class="n">aclass</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="p">[</span><span class="n">_name</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>    <span class="n">aclass</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">_age</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">aclass</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>之后在运行之前的代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AClass</span> <span class="o">*</span><span class="n">aclass</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">aclass</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;00000000&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">aclass</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="n">AClass</span> <span class="o">*</span><span class="n">aclass_0</span> <span class="o">=</span> <span class="p">[</span><span class="n">aclass</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@--------------%@&quot;</span><span class="p">,</span><span class="n">aclass</span><span class="p">,</span><span class="n">aclass_0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*输出结果</span>
</span><span class='line'><span class="cm">2015-08-22 14:07:11.509 Text[4180:74165] &lt;AClass: 0x7f91932298c0&gt;--------------&lt;AClass: 0x7f9193229770&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>小结：至于NSCopying同理。</li>
</ul>


<h4>参考文章</h4>

<ul>
<li><a href="http://www.cocoachina.com/ios/20141113/10213.html">Objective-C中的浅拷贝和深拷贝</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[原谅我这一生不羁放纵爱自由]]></title>
    <link href="http://etund.github.com/blog/2015/08/21/yuan-liang-wo-zhe-%5B%3F%5D-sheng-bu-ji-fang-zong-ai-zi-you/"/>
    <updated>2015-08-21T22:13:01+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/21/yuan-liang-wo-zhe-[?]-sheng-bu-ji-fang-zong-ai-zi-you</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RunLoop深度剖析]]></title>
    <link href="http://etund.github.com/blog/2015/08/21/runloopshen-du-pou-xi/"/>
    <updated>2015-08-21T22:13:01+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/21/runloopshen-du-pou-xi</id>
    <content type="html"><![CDATA[<h1>RunLoop</h1>

<h2>前言</h2>

<ul>
<li><p>RunLoop是iOS/OS开发中比较基础的一个概念，在苹果开发中用在事件处理，延迟加载，屏幕刷新等功能的处理，其实抛开语言，RunLoop是一个的架构模式，也就是RunLoop不仅仅局限于iOS开发。</p></li>
<li><p>网上有很多关于RunLoop的干货，但大多不怎么全，这位哥们的写的挺好的，挺详细的，基本上把要说的都说了，底层也研究的很细，本文基本上是转载他的，只是在它的基础上，基于我的知识水平补充了一些，原文：<a href="http://www.cocoachina.com/ios/20150601/11970.html">http://www.cocoachina.com/ios/20150601/11970.html</a></p></li>
<li><p>官方有已经有<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">关于RunLoop的官方文档</a>，英语的，不过网上已经有人把它翻译为中文了，大家可以去看看.</p></li>
</ul>


<!-- more -->


<h2>概念</h2>

<ul>
<li><p>简单来说RunLoop是线程的基本架构模式，架构模式，架构模式-重要的事情说三遍，然并卵，哈哈，具体怎么做呢，就是有事做事，没事睡觉，有事叫我，就这样，想看详细的自己看中文文档去，毕竟文档哪里已经写的好详细了，再板书就没意义了。</p></li>
<li><p>分类(获取)：苹果提供了两个途径来获取分别是Cocoe里面定义的NSRunLoop以及CoreFoundation里面定义的CFRunLoopRef。</p></li>
<li>CFRunLoopRef提供了纯C函数的API，所有这些API都是线程安全的。</li>
<li>NSRunLoop提供了面向对象的API，但这些API不是线程安全的。</li>
<li>创建，苹果官方对CFRunLoopRef进行了开源，在这里<a href="http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz">官方源码</a>下载就好，苹果官方不提供向我们平时那样子的新建对象的方法来获取NSRunLoop实例，但是可以通过[NSRunLoop getCurrentLoop]来创建，接下来看看具体是怎么创建的把,Show code！</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    全局字典，用来存放线程对应的RunLoop</span>
</span><span class='line'><span class="c1">//    key是线程，value是RunLoop实例，换言之线程与RunLoopRunLoop一一对应</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CFMutableDictionaryRef</span> <span class="n">__CFRunLoops</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CFSpinLock_t</span> <span class="n">loopsLock</span> <span class="o">=</span> <span class="n">CFSpinLockInit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 当t == 0 的时候，代表主线程</span>
</span><span class='line'>    <span class="n">CF_EXPORT</span> <span class="n">CFRunLoopRef</span> <span class="nf">_CFRunLoopGet0</span><span class="p">(</span><span class="kt">pthread_t</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//        如果存进来的线程等于 0</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pthread_equal</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">kNilPthreadT</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//            那么当前线程等于主线程</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">pthread_main_thread_np</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">//        给操作加锁</span>
</span><span class='line'>        <span class="n">__CFSpinLock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loopsLock</span><span class="p">);</span>
</span><span class='line'><span class="c1">//        如果当前RunLoop没有为空，创建。</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">__CFRunLoops</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">__CFSpinUnlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loopsLock</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CFMutableDictionaryRef</span> <span class="n">dict</span> <span class="o">=</span> <span class="n">CFDictionaryCreateMutable</span><span class="p">(</span><span class="n">kCFAllocatorSystemDefault</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryValueCallBacks</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CFRunLoopRef</span> <span class="n">mainLoop</span> <span class="o">=</span> <span class="n">__CFRunLoopCreate</span><span class="p">(</span><span class="n">pthread_main_thread_np</span><span class="p">());</span>
</span><span class='line'><span class="c1">//            把线程与RunLoop一一对应的存进字典</span>
</span><span class='line'>            <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">pthreadPointer</span><span class="p">(</span><span class="n">pthread_main_thread_np</span><span class="p">()),</span> <span class="n">mainLoop</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">OSAtomicCompareAndSwapPtrBarrier</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">dict</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="k">volatile</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">__CFRunLoops</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">CFRelease</span><span class="p">(</span><span class="n">dict</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">CFRelease</span><span class="p">(</span><span class="n">mainLoop</span><span class="p">);</span>
</span><span class='line'>            <span class="n">__CFSpinLock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loopsLock</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">//        获取当前线程的RunLoop</span>
</span><span class='line'>        <span class="n">CFRunLoopRef</span> <span class="n">loop</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFRunLoopRef</span><span class="p">)</span><span class="n">CFDictionaryGetValue</span><span class="p">(</span><span class="n">__CFRunLoops</span><span class="p">,</span> <span class="n">pthreadPointer</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>        <span class="n">__CFSpinUnlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loopsLock</span><span class="p">);</span>
</span><span class='line'><span class="c1">//        如果不是主线程并且之前没有创建，也即是为空</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CFRunLoopRef</span> <span class="n">newLoop</span> <span class="o">=</span> <span class="n">__CFRunLoopCreate</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>            <span class="n">__CFSpinLock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loopsLock</span><span class="p">);</span>
</span><span class='line'>            <span class="n">loop</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFRunLoopRef</span><span class="p">)</span><span class="n">CFDictionaryGetValue</span><span class="p">(</span><span class="n">__CFRunLoops</span><span class="p">,</span> <span class="n">pthreadPointer</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//                把当前子线程和创建的RunLoop一一对应的存进字典</span>
</span><span class='line'>                <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">__CFRunLoops</span><span class="p">,</span> <span class="n">pthreadPointer</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">newLoop</span><span class="p">);</span>
</span><span class='line'>                <span class="n">loop</span> <span class="o">=</span> <span class="n">newLoop</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// don&#39;t release run loops inside the loopsLock, because CFRunLoopDeallocate may end up taking it</span>
</span><span class='line'>            <span class="n">__CFSpinUnlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">loopsLock</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CFRelease</span><span class="p">(</span><span class="n">newLoop</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pthread_equal</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">pthread_self</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_CFSetTSD</span><span class="p">(</span><span class="n">__CFTSDKeyRunLoop</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">loop</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">_CFGetTSD</span><span class="p">(</span><span class="n">__CFTSDKeyRunLoopCntr</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">_CFSetTSD</span><span class="p">(</span><span class="n">__CFTSDKeyRunLoopCntr</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">PTHREAD_DESTRUCTOR_ITERATIONS</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">))</span><span class="n">__CFFinalizeRunLoop</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">loop</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上面是苹果开源的CFRunLoop中获取RunLoop的代码，简而言之就是，在调用这个方法要存进一个PThread(PThread提供了跨平台的管理多线程的API)，利用这个PThread作为全局字典中的key，并创建与之对应的RunLoop作为Value.RunLoop在我们获取的时候创建，不获取不创建，主线程的RunLoop在一开始就自动创建。<code>简而言之，线程与RunLoop一一对应</code></li>
</ul>


<h2>对外接口</h2>

<ul>
<li>在CoreFoundation里面关于RunLoop有5个类

<ul>
<li>CFRunLoopTimerRef</li>
<li>CFRunLoopObserverRef</li>
<li>CFRunLoopSourceRef</li>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
</ul>
</li>
</ul>


<p><code>其中CFRunLoopModeRef类没有对外暴露，只是通过CFRunLoopRef接口进行了封装</code>
- 一个RunLoop包含若干个Mode,每个Mode又包含若干个source/Timer/Observer,如图。</p>

<p><img src="http://etund.github.com/images/blog/runloop/1432798883604537.png" alt="" /></p>

<ul>
<li><p>每次调用RunLoop的主函数时，只能指定其中一个Mode作为CurrentMode(可以通过这个属性获取当前的Mode),只能退出Loop,在重新指定一个Mode进入。在这里需要清楚的是，系统默认注册了5个Mode</p>

<ul>
<li>NSDefaultRunLoopMode:App默认Mode,当没有接收到ScrollView滚动是，主线程通常使用这个Mode</li>
<li><p>NSTrackingRunLoopMode:到接收到ScroolView或其子类的时候，主线程就会切换到这个模式下运行。</p></li>
<li><p>UIInitializationRunLoopMode：当App启动时使用的第一个Mode,当启动完成后不再使用。</p></li>
<li>NSRunLoopCommonModes，是一个tag,本质上不是一个Mode,默认NSDefaultRunLoopMode和NSTrackingRunLoopMode都绑定这个tag。(应用场景：有时候我们需要添加一个NSTimer在RunLoop,在这时需要制定一个Modes，现在的需求是:我们既要在默认模式下要监听，在滚动模式下也要监听，但只能制定一个模式，这是可以制定这个CommonMode)</li>
<li>GSEventReceiveRunLoopMode：接受系统内部的Mode,通常做不到。</li>
<li>处理不同事件使用不同的Mode，可以最大限度的把性能的最大化处理不同分类的事件，提高性能。</li>
</ul>
</li>
<li><p>CFRunLoopSourceRef：事件产生的地方，按照函数调用栈来分，Source的分类可以分为</p>

<ul>
<li>Source0：非基于Port的，只包含一个回调(函数指针)，他并不能主动触发事件。使用时，你需要先把这个Source标记为待处理，然后手动调用CFRunLoopWakeUp(RunLoop)，然后再让它执行。</li>
<li>Source1：基于Port的，通过内核和其他线程通信分发的、系统事件。</li>
<li>这里的Port是线程间通信的一种方式，简而言之，如果两个线程之间想通信，可以对方的Port来通信。</li>
</ul>
</li>
<li>CFRunLoopTimerRef

<ul>
<li>基于时间触发器，当其加入RunLoop时，RunLoop会注册对应的时间点，当时间点到，RunLoop会被唤醒执行里面的回调。</li>
</ul>
</li>
<li><p>CFRunLoopObserverRef</p>

<ul>
<li>这是观察者，能够监听RunLoop的状态改变。</li>
<li>可以监听的时间点有以下几个。</li>
</ul>


<pre><code class="``objc">  /* Run Loop Observer Activities */
typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
  kCFRunLoopEntry = (1UL &lt;&lt; 0),//即将进入Loop
  kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),//即将处理Timer
  kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),//即将处理Source
  kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),//即将进入休眠
  kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),//刚从休眠中唤醒
  kCFRunLoopExit = (1UL &lt;&lt; 7),//即将 退出Loop
  kCFRunLoopAllActivities = 0x0FFFFFFFU
};
</code></pre>

<ul>
<li>上面的Source/Timer/Observer被统称为mode item,一个item可以被同时加入多个mode。但一个item被重复加入同一个mode时不会有效果，如果一个item里面一个mode也没有，则RunLoop刚创建就被退出，不进入循环，这里在线程常驻的时候会讲到。</li>
</ul>
</li>
<li><p>CFRunLoop对外暴露的管理Mode的接口只有下面2个
<code>objc
CF_EXPORT SInt32 CFRunLoopRunInMode(CFStringRef mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled);
CF_EXPORT void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFStringRef mode);
</code></p></li>
<li><p>Mode暴露管理的mode item的接口有下面几个</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFRunLoopAddSource</span><span class="p">(</span><span class="n">CFRunLoopRef</span> <span class="n">rl</span><span class="p">,</span> <span class="n">CFRunLoopSourceRef</span> <span class="n">source</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">modeName</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRunLoopAddObserver</span><span class="p">(</span><span class="n">CFRunLoopRef</span> <span class="n">rl</span><span class="p">,</span> <span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">modeName</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRunLoopAddTimer</span><span class="p">(</span><span class="n">CFRunLoopRef</span> <span class="n">rl</span><span class="p">,</span> <span class="n">CFRunLoopTimerRef</span> <span class="n">timer</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRunLoopRemoveSource</span><span class="p">(</span><span class="n">CFRunLoopRef</span> <span class="n">rl</span><span class="p">,</span> <span class="n">CFRunLoopSourceRef</span> <span class="n">source</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">modeName</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRunLoopRemoveObserver</span><span class="p">(</span><span class="n">CFRunLoopRef</span> <span class="n">rl</span><span class="p">,</span> <span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">modeName</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRunLoopRemoveTimer</span><span class="p">(</span><span class="n">CFRunLoopRef</span> <span class="n">rl</span><span class="p">,</span> <span class="n">CFRunLoopTimerRef</span> <span class="n">timer</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">mode</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>你只能通过mode name来操作内部的mode,当你传入一个的mode name没有对应的mode.RunLoop会自动帮你创建对应的CFRunLoopModeRef。对于一个RunLoop来说，其内部的mode只能增加不能删除。</li>
</ul>


<h2>RunLoop的内部逻辑</h2>

<ul>
<li>RunLoop内部的逻辑大致如下</li>
</ul>


<p><img src="http://etund.github.com/images/blog/runloop/1432798974517485.png" alt="" /></p>

<ul>
<li>其内部代码整理如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// 用DefaultMode启动</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">CFRunLoopRun</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFRunLoopRunSpecific</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">,</span> <span class="mf">1.0e10</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 用指定的Mode启动，允许设置RunLoop超时时间</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">CFRunLoopRunInMode</span><span class="p">(</span><span class="n">CFStringRef</span> <span class="n">modeName</span><span class="p">,</span> <span class="n">CFTimeInterval</span> <span class="n">seconds</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="n">stopAfterHandle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CFRunLoopRunSpecific</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">modeName</span><span class="p">,</span> <span class="n">seconds</span><span class="p">,</span> <span class="n">returnAfterSourceHandled</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// RunLoop的实现</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">CFRunLoopRunSpecific</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">modeName</span><span class="p">,</span> <span class="n">seconds</span><span class="p">,</span> <span class="n">stopAfterHandle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 首先根据modeName找到对应mode</span>
</span><span class='line'>    <span class="n">CFRunLoopModeRef</span> <span class="n">currentMode</span> <span class="o">=</span> <span class="n">__CFRunLoopFindMode</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">modeName</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">/// 如果mode里没有source/timer/observer, 直接返回。</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">__CFRunLoopModeIsEmpty</span><span class="p">(</span><span class="n">currentMode</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 1. 通知 Observers: RunLoop 即将进入 loop。</span>
</span><span class='line'>    <span class="n">__CFRunLoopDoObservers</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">kCFRunLoopEntry</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 内部函数，进入loop</span>
</span><span class='line'>    <span class="n">__CFRunLoopRun</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">seconds</span><span class="p">,</span> <span class="n">returnAfterSourceHandled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">Boolean</span> <span class="n">sourceHandledThisLoop</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">retVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span>
</span><span class='line'>            <span class="n">__CFRunLoopDoObservers</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">kCFRunLoopBeforeTimers</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">/// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span>
</span><span class='line'>            <span class="n">__CFRunLoopDoObservers</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">kCFRunLoopBeforeSources</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">/// 执行被加入的block</span>
</span><span class='line'>            <span class="n">__CFRunLoopDoBlocks</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 4. RunLoop 触发 Source0 (非port) 回调。</span>
</span><span class='line'>            <span class="n">sourceHandledThisLoop</span> <span class="o">=</span> <span class="n">__CFRunLoopDoSources0</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">stopAfterHandle</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">/// 执行被加入的block</span>
</span><span class='line'>            <span class="n">__CFRunLoopDoBlocks</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">__Source0DidDispatchPortLastTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kt">Boolean</span> <span class="n">hasMsg</span> <span class="o">=</span> <span class="n">__CFRunLoopServiceMachPort</span><span class="p">(</span><span class="n">dispatchPort</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">hasMsg</span><span class="p">)</span> <span class="k">goto</span> <span class="n">handle_msg</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sourceHandledThisLoop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">__CFRunLoopDoObservers</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">kCFRunLoopBeforeWaiting</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span>
</span><span class='line'>            <span class="c1">/// ? 一个基于 port 的Source 的事件。</span>
</span><span class='line'>            <span class="c1">/// ? 一个 Timer 到时间了</span>
</span><span class='line'>            <span class="c1">/// ? RunLoop 自身的超时时间到了</span>
</span><span class='line'>            <span class="c1">/// ? 被其他什么调用者手动唤醒</span>
</span><span class='line'>            <span class="n">__CFRunLoopServiceMachPort</span><span class="p">(</span><span class="n">waitSet</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">msg_buffer</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">livePort</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">mach_msg</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">MACH_RCV_MSG</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span> <span class="c1">// thread wait for receive msg</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span>
</span><span class='line'>            <span class="n">__CFRunLoopDoObservers</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">kCFRunLoopAfterWaiting</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 收到消息，处理消息。</span>
</span><span class='line'>            <span class="nl">handle_msg</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">msg_is_timer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">__CFRunLoopDoTimers</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">mach_absolute_time</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 9.2 如果有dispatch到main_queue的block，执行block。</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">msg_is_dispatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">CFRunLoopSourceRef</span> <span class="n">source1</span> <span class="o">=</span> <span class="n">__CFRunLoopModeFindSourceForMachPort</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">livePort</span><span class="p">);</span>
</span><span class='line'>                <span class="n">sourceHandledThisLoop</span> <span class="o">=</span> <span class="n">__CFRunLoopDoSource1</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">source1</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">sourceHandledThisLoop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">mach_msg</span><span class="p">(</span><span class="n">reply</span><span class="p">,</span> <span class="n">MACH_SEND_MSG</span><span class="p">,</span> <span class="n">reply</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 执行加入到Loop的block</span>
</span><span class='line'>            <span class="n">__CFRunLoopDoBlocks</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">sourceHandledThisLoop</span> <span class="o">&amp;&amp;</span> <span class="n">stopAfterHandle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">/// 进入loop时参数说处理完事件就返回。</span>
</span><span class='line'>                <span class="n">retVal</span> <span class="o">=</span> <span class="n">kCFRunLoopRunHandledSource</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">timeout</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">/// 超出传入参数标记的超时时间了</span>
</span><span class='line'>                <span class="n">retVal</span> <span class="o">=</span> <span class="n">kCFRunLoopRunTimedOut</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">__CFRunLoopIsStopped</span><span class="p">(</span><span class="n">runloop</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">/// 被外部调用者强制停止了</span>
</span><span class='line'>                <span class="n">retVal</span> <span class="o">=</span> <span class="n">kCFRunLoopRunStopped</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">__CFRunLoopModeIsEmpty</span><span class="p">(</span><span class="n">runloop</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">/// source/timer/observer一个都没有了</span>
</span><span class='line'>                <span class="n">retVal</span> <span class="o">=</span> <span class="n">kCFRunLoopRunFinished</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">/// 如果没超时，mode里没空，loop也没被停止，那继续loop。</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">retVal</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 10. 通知 Observers: RunLoop 即将退出。</span>
</span><span class='line'>    <span class="n">__CFRunLoopDoObservers</span><span class="p">(</span><span class="n">rl</span><span class="p">,</span> <span class="n">currentMode</span><span class="p">,</span> <span class="n">kCFRunLoopExit</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以看到，实际上 RunLoop就是这样一个函数，其内部是一个 do-while 循环。当你调用CFRunLoopRun()时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。</li>
</ul>


<h2>底层实现</h2>

<ul>
<li>从上面代码可以看到，RunLoop 的核心是基于 mach port 的，其进入休眠时调用的函数是mach_msg()。为了解释这个逻辑，下面稍微介绍一下 OSX/iOS 的系统架构</li>
</ul>


<p><img src="http://etund.github.com/images/blog/runloop/1432799001829463.png" alt="" /></p>

<ul>
<li>苹果官方将整个系统大致划分为上述4个层次：

<ul>
<li>应用层包括用户能接触到的图形应用，例如 Spotlight、Aqua、SpringBoard 等。</li>
<li>应用框架层即开发人员接触到的 Cocoa 等框架。</li>
<li>核心框架层包括各种核心框架、OpenGL 等内容。</li>
<li>Darwin 即操作系统的核心，包括系统内核、驱动、Shell 等内容，这一层是开源的，其所有源码都可以在<a href="http://opensource.apple.com/">苹果开源源码</a>里找到。</li>
</ul>
</li>
<li>我们在深入看一下 Darwin 这个核心的架构：</li>
</ul>


<p><img src="http://etund.github.com/images/blog/runloop/1432799031419231.png" alt="" /></p>

<pre><code>- 其中，在硬件层上面的三个组成部分：Mach、BSD、IOKit (还包括一些上面没标注的内容)，共同组成了 XNU 内核
- XNU 内核的内环被称作Mach，其作为一个微内核，仅提供了诸如处理器调度、IPC (进程间通信)等非常少量的基础服务。
- BSD 层可以看作围绕Mach层的一个外环，其提供了诸如进程管理、文件系统和网络等功能。
- IOKit 层是为设备驱动提供了一个面向对象(C++)的一个框架。
- Mach 本身提供的 API 非常有限，而且苹果也不鼓励使用 Mach 的 API，但是这些API非常基础，如果没有这些API的话，其他任何工作都无法实施。在Mach中，所有的东西都是通过自己的对象实现的，进程、线程和虚拟内存都被称为"对象"。和其他架构不同， Mach 的对象间不能直接调用，只能通过消息传递的方式实现对象间的通信。"消息"是Mach中最基础的概念，消息在两个端口 (port) 之间传递，这就是 Mach 的 IPC (进程间通信) 的核心。
- Mach 的消息定义是在头文件的，很简单：

```objc
    typedef struct {
  mach_msg_header_t header;
  mach_msg_body_t body;
    } mach_msg_base_t;

typedef struct {
  mach_msg_bits_t msgh_bits;
  mach_msg_size_t msgh_size;
  mach_port_t msgh_remote_port;
  mach_port_t msgh_local_port;
  mach_port_name_t msgh_voucher_port;
  mach_msg_id_t msgh_id;
    } mach_msg_header_t;

```

- 一条 Mach 消息实际上就是一个二进制数据包(BLOB)，其头部定义了当前端口 local_port 和目标端口 remote_port。
</code></pre>

<ul>
<li><p> 发送和接受消息是通过同一个API进行的，其option标记了消息传递的方向：</p>

<pre><code class="objc">mach_msg_return_t mach_msg(
mach_msg_header_t *msg,
mach_msg_option_t option,
mach_msg_size_t send_size,
mach_msg_size_t rcv_size,
mach_port_name_t rcv_name,
mach_msg_timeout_t timeout,
mach_port_name_t notify);
</code></pre>

<ul>
<li>为了实现消息的发送和接收，mach_msg()函数实际上是调用了一个 Mach 陷阱(trap)，即函数ach_msg_trap()，陷阱这个概念在Mach中等同于系统调用。当你在用户态调用mach_msg_trap()时会触发陷阱机制，切换到内核态；内核态中内核实现的 mach_msg() 函数会完成实际的工作，如下图：</li>
</ul>
</li>
</ul>


<p><img src="http://etund.github.com/images/blog/runloop/1432799057446598.png" alt="" /></p>

<pre><code>- RunLoop 的核心就是一个mach_msg()(见上面代码的第7步)，RunLoop 调用这个函数去接收消息，如果没有别人发送 port 消息过来，内核会将线程置于等待状态。例如你在模拟器里跑起一个 iOS 的 App，然后在App静止时点击暂停，你会看到主线程调用栈是停留在 mach_msg_trap() 这个地方
- 当 RunLoop进行回调时，一般都是通过一个很长的函数调用出去 (call out),当你在你的代码中下断点调试时，通常能在调用栈上看到这些函数。下面是这几个函数的整理版本，如果你在调用栈中看到这些长函数名，在这里查找一下就能定位到具体的调用地点了：

```objc


{
/// 1. 通知Observers，即将进入RunLoop
/// 此处有Observer会创建AutoreleasePool:                         _objc_autoreleasePoolPush();
__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION_    _(kCFRunLoopEntry);
do {

    /// 2. 通知 Observers: 即将触发 Timer 回调。
    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);
    /// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。
    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);
    __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);

    /// 4. 触发 Source0 (非基于port的) 回调。
    __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);
    __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);

    /// 6. 通知Observers，即将进入休眠
    /// 此处有Observer释放并新建AutoreleasePool:     _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();
    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);

    /// 7. sleep to wait msg.
    mach_msg() -&gt; mach_msg_trap();


    /// 8. 通知Observers，线程被唤醒
    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);

    /// 9. 如果是被Timer唤醒的，回调Timer
    __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);

    /// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block
    __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);

    /// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件
    __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);


} while (...);

/// 10. 通知Observers，即将退出RunLoop
/// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();
__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);
</code></pre>

<p>}
    ```</p>

<h2>RunLoop 的实际应用举例</h2>

<h6>AutoreleasePool</h6>

<ul>
<li><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p></li>
<li><p>第一个 Observer监视的事件是Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush()创建自动释放池。其order是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p></li>
<li><p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用<em>objc_autoreleasePoolPop() 和 </em>objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop)时调用_objc_autoreleasePoolPop() 来释放自动释放池。这个Observer的order是2147483647，优先级最低，保证其释放池子发生在其他所有回调之后</p></li>
<li><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop创建好的AutoreleasePool环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p></li>
</ul>


<h6>事件响应</h6>

<ul>
<li><p>苹果注册了一个Source1(基于machport的)用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。</p></li>
<li><p>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由IOKit.framework 生成一个 IOHIDEvent事件并由SpringBoard接收。这个过程的详细情况可以参考这里。SpringBoard只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用macport转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用_UIApplicationHandleEventQueue() 进行应用内部的分发。</p></li>
<li><p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如UIButton点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p></li>
</ul>


<h6>手势识别</h6>

<ul>
<li><p>当上面的 _UIApplicationHandleEventQueue()识别了一个手势时，其首先会调用 Cancel 将当前的touchesBegin/Move/End系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p></li>
<li><ul>
<li>苹果注册了一个 Observer 监测 BeforeWaiting(Loop即将进入休眠) 事件，这个Observer的回调函数是_UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的GestureRecognizer，并执行GestureRecognizer的回调。</li>
</ul>
</li>
<li><p>当有 UIGestureRecognizer的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p></li>
</ul>


<h6>界面更新</h6>

<ul>
<li><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 层次时，或者手动调用了UIView/CALayer的setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer就被标记为待处理，并被提交到一个全局的容器去。</p></li>
<li><p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：</p></li>
<li><p>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()。这个函数里会遍历所有待处理的UIView/CAlayer以执行实际的绘制和调整，并更新 UI 界面。</p></li>
<li><p>这个函数内部的调用栈大概是这样的：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv</span><span class="p">()</span>
</span><span class='line'>    <span class="nl">QuartzCore</span><span class="p">:</span><span class="n">CA</span><span class="o">::</span><span class="n">Transaction</span><span class="o">::</span><span class="nl">observer_callback</span><span class="p">:</span>
</span><span class='line'>        <span class="n">CA</span><span class="o">::</span><span class="n">Transaction</span><span class="o">::</span><span class="n">commit</span><span class="p">();</span>
</span><span class='line'>            <span class="n">CA</span><span class="o">::</span><span class="n">Context</span><span class="o">::</span><span class="n">commit_transaction</span><span class="p">();</span>
</span><span class='line'>                <span class="n">CA</span><span class="o">::</span><span class="n">Layer</span><span class="o">::</span><span class="n">layout_and_display_if_needed</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">CA</span><span class="o">::</span><span class="n">Layer</span><span class="o">::</span><span class="n">layout_if_needed</span><span class="p">();</span>
</span><span class='line'>                        <span class="p">[</span><span class="bp">CALayer</span> <span class="n">layoutSublayers</span><span class="p">];</span>
</span><span class='line'>                            <span class="p">[</span><span class="bp">UIView</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">CA</span><span class="o">::</span><span class="n">Layer</span><span class="o">::</span><span class="n">display_if_needed</span><span class="p">();</span>
</span><span class='line'>                        <span class="p">[</span><span class="bp">CALayer</span> <span class="n">display</span><span class="p">];</span>
</span><span class='line'>                            <span class="p">[</span><span class="bp">UIView</span> <span class="n">drawRect</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h6>定时器</h6>

<ul>
<li><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer注册到RunLoop后，RunLoop会为其重复的时间点注册好事件。例如10:00,10:10,10:20这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p></li>
<li><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果10:10时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p></li>
<li><p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook开源的AsyncDisplayLink就是为了解决界面卡顿的问题，其内部也用到了RunLoop。</p></li>
<li><p>解决方案:如果有某些需求或者有强迫症的同学一定要做到时刻准确，那么可以用GCD的定时器来实现。</p></li>
</ul>


<h6>PerformSelecter(利用RunLoop常驻线程)</h6>

<ul>
<li><p>当调用 NSObject的performSelecter:afterDelay:后，实际上其内部会创建一个 Timer 并添加到当前线程的RunLoop中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p></li>
<li><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有RunLoop该方法也会失效。</p>

<h6>GCD</h6></li>
<li><p>实际上 RunLoop 底层也会用到 GCD 的东西，比如 RunLoop 是用 dispatch_source_t 实现的 Timer。但同时 GCD提供的某些接口也用到了 RunLoop， 例如 dispatch_async()。</p></li>
<li><p>当调用 dispatch_async(dispatch_get_main_queue(), block) 时，libDispatch 会向主线程的RunLoop发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调</p></li>
<li><p><strong>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</strong>()里执行这个 block。但这个逻辑仅限于dispatch到主线程，dispatch到其他线程仍然是由 libDispatch 处理的。</p></li>
</ul>


<h6>关于网络请求</h6>

<ul>
<li>iOS 中，关于网络请求的接口自下至上有如下几层:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFSocket</span>
</span><span class='line'><span class="n">CFNetwork</span>       <span class="o">-&gt;</span><span class="n">ASIHttpRequest</span>
</span><span class='line'><span class="bp">NSURLConnection</span> <span class="o">-&gt;</span><span class="n">AFNetworking</span>
</span><span class='line'><span class="bp">NSURLSession</span>    <span class="o">-&gt;</span><span class="n">AFNetworking2</span><span class="p">,</span> <span class="n">Alamofire</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li><p>CFSocket 是最底层的接口，只负责 socket 通信。</p></li>
<li><p>CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。</p></li>
<li><p>NSURLConnection是基于CFNetwork的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层</p></li>
<li><p>NSURLSession 是iOS7中新增的接口，表面上是和NSURLConnection 并列的，但底层仍然用到了</p></li>
</ul>
</li>
<li><p>下面主要介绍下 NSURLConnection 的工作过程。</p>

<ul>
<li><p>通常使用 NSURLConnection 时，你会传入一个Delegate，当调用了 [connection start]后，这个Delegate会不停收到事件回调。实际上，<code>start这个函数的内部会会获取CurrentRunLoop</code>，然后在其中的DefaultMode添加了4个 Source0(即需要手动触发的Source)。CFMultiplexerSource是负责各种 Delegate回调的，CFHTTPCookieStorage是处理各种Cookie 的。</p></li>
<li><p>当开始网络传输时，我们可以看到NSURLConnection创建了两个新线程：com.apple.NSURLConnectionLoader和com.apple.CFSocket.private。其中 CFSocket程是处理底层socket连接的。NSURLConnectionLoader 这个线程内部会使用RunLoop来接收底层socket的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p></li>
</ul>
</li>
</ul>


<p><img src="http://etund.github.com/images/blog/runloop/1432799200369980.png" alt="" /></p>

<ul>
<li>NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层CFSocket的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource等Source0发送通知，同时唤醒 Delegate 线程的RunLoop来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对Delegate执行实际的回调。</li>
</ul>


<h6>AFNetworking</h6>

<ul>
<li>AFURLConnectionOperation这个类是基于NSURLConnection构建的，其希望能在后台线程接收Delegate回调。为此AFNetworking独创建了一个线程，并在这个线程中启动了一个 RunLoop：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">networkRequestThreadEntryPoint:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">__unused</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="nl">setName</span><span class="p">:</span><span class="s">@&quot;AFNetworking&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSRunLoop</span> <span class="o">*</span><span class="n">runLoop</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">runLoop</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSMachPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">runLoop</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="bp">NSThread</span> <span class="o">*</span><span class="p">)</span><span class="n">networkRequestThread</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSThread</span> <span class="o">*</span><span class="n">_networkRequestThread</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">oncePredicate</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oncePredicate</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_networkRequestThread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">networkRequestThreadEntryPoint</span><span class="p">:)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_networkRequestThread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_networkRequestThread</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>RunLoop 启动前内部必须要有至少一个item</code>，所以 AFNetworking在[runLooprun]之前先创建了一个新的NSMachPort 添加进去了。通常情况下，调用者需要持有这个NSMachPort(mach_port) 并在外部线程通过这个port发送消息到loop内；但此处添加 port 只是为了让RunLoop不至于退出，并没有用于实际的发送消息</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">lock</span> <span class="n">lock</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">isCancelled</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelConnection</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">networkRequestThread</span><span class="p">]</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">modes</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopModes</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">isReady</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">AFOperationExecutingState</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">operationDidStart</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">networkRequestThread</span><span class="p">]</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">modes</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopModes</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">lock</span> <span class="n">unlock</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注意<code>RunLoop 启动前内部必须要有至少一个item</code>，虽然Obsever也是item的一种，但是只会等待Timer和Source ，Timer是因为有回调，Source是会接收事件，所以当RunLoop里面有Timer或者Source的时候，RunLoop会等待里面的item(除Obsever以外)<code>主动</code>给他发消息，然后Oberver<code>被动</code>的接收RunLoop发送过来的消息，亦即是说，能主动给RunLoop发消息的item会让RunLoop跑起来并且不退出。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">CFRunLoopObserverCreateWithHandler</span><span class="p">(</span><span class="n">CFAllocatorGetDefault</span><span class="p">(),</span> <span class="n">kCFRunLoopAllActivities</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span> <span class="n">activity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">CFRunLoopAddObserver</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">);</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当需要这个后台线程执行任务时，AFNetworking 通过调用[NSObject performSelector:onThread:..] 将这个任务扔到了后台线程的 RunLoop 中。</li>
</ul>


<h6>AsyncDisplayKit</h6>

<ul>
<li><p>AsyncDisplayKit是Facebook推出的用于保持界面流畅性的框架，其原理大致如下：</p>

<ul>
<li><p>UI 线程中一旦出现繁重的任务就会导致界面卡顿，这类任务通常分为3类：排版，绘制，UI对象操作。</p></li>
<li><p>排版通常包括计算视图大小、计算文本高度、重新计算子式图的排版等操作</p></li>
<li><p>绘制一般有文本绘制 (例如 CoreText)、图片绘制 (例如预先解压)、元素绘制 (Quartz)等操作。</p></li>
<li><p>UI对象操作通常包括 UIView/CALayer 等 UI 对象的创建、设置属性和销毁。</p></li>
</ul>
</li>
<li><p>其中前两类操作可以通过各种方法扔到后台线程执行，而最后一类操作只能在主线程完成，并且有时后面的操作需要依赖前面操作的结果 （例如TextView创建时可能需要提前计算出文本的大小）。ASDK 所做的，就是尽量将能放入后台的任务放入后台，不能的则尽量推迟 (例如视图的创建、属性的调整)。</p></li>
<li><p>为此，ASDK 创建了一个名为 ASDisplayNode 的对象，并在内部封装了 UIView/CALayer，它具有和 UIView/CALayer 相似的属性，例如 frame、backgroundColor等。所有这些属性都可以在后台线程更改，开发者可以只通过 Node 来操作其内部的 UIView/CALayer，这样就可以将排版和绘制放入了后台线程。但是无论怎么操作，这些属性总需要在某个时刻同步到主线程的 UIView/CALayer 去。</p></li>
<li><p>ASDK 仿照 QuartzCore/UIKit 框架的模式，实现了一套类似的界面更新的机制：即在主线程的 RunLoop 中添加一个 Observer，监听了 kCFRunLoopBeforeWaiting 和 kCFRunLoopExit 事件，在收到回调时，遍历所有之前放入队列的待处理的任务，然后一一执行。</p></li>
</ul>


<h6>常驻线程</h6>

<ul>
<li>有这么一个需求，我们要在子线程中没接收一个事件就调用一次方法。但是子线程在完成任务后就销毁，全局变量强引用？试试</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSThread</span> <span class="o">*</span><span class="kr">thread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">run</span><span class="p">:)</span> <span class="nl">object</span><span class="p">:</span><span class="s">@&quot;etund&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="kr">thread</span> <span class="o">=</span> <span class="kr">thread</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;-----%p&quot;</span><span class="p">,[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="kr">thread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="kr">thread</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;==========&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;------------------&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果不能执行，这里要清楚线程的5个状态，新建，就绪，运行，阻塞，死亡。意思就是就算你是强引用一个子线程，但是他执行完任务就已经处于死亡状态了，只是他还存储在内存，`那么现在分析一下。</p>

<ul>
<li>想在子线程中不断执行任务，必须保证子线不处于死亡状态</li>
<li>但是子线程执行完一次任务就进入死亡状态</li>
<li><p>那我们可以把线程停留在进入死亡状态之前，这里可以用RunLoop</p></li>
<li><p>我们可以在线程初始化的时候执行的方法中给他创建一个运行时RunLoop,这是他就可以不断接收source，也就是这样</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[[</span><span class="bp">NSPort</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span> <span class="c1">// 1</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注意：上面第一行代码必须加上，因为一个RunLoop里面必须有至少一个item(Obsever除外)</code></p>

<h6>GCD定时器</h6>

<ul>
<li>有这么一个需求，需要这么一个定时器，误差几乎为0的定时器，但是无论是NSTimer还是CGDisplayLink都会有误差，而且误差都比较大，这是我们可以用GCD来实现定时器，实际上，上面已经说了，RunLoop底层也是调用GCD的source来实现NSTimer的，只是NSTimer还受mode的影响，下面来看看怎么用GCD实现</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    获取队列</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_main_queue</span><span class="p">();</span>
</span><span class='line'><span class="c1">//    创建定时器</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">dispatch_source_create</span><span class="p">(</span><span class="n">DISPATCH_SOURCE_TYPE_TIMER</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">queue</span><span class="p">);</span>
</span><span class='line'><span class="c1">//    设置定时器属性(什么时候开始，间隔多大)</span>
</span><span class='line'><span class="c1">//    定义开始时间</span>
</span><span class='line'>    <span class="kt">dispatch_time_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mf">1.0</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">));</span>
</span><span class='line'><span class="c1">//    定义时间间隔</span>
</span><span class='line'>    <span class="kt">uint64_t</span> <span class="n">interver</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)(</span><span class="mf">1.0</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">);</span>
</span><span class='line'><span class="c1">//    设置开始时间和时间间隔</span>
</span><span class='line'>    <span class="n">dispatch_source_set_timer</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">timer</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span><span class="n">interver</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="c1">//    设置回调</span>
</span><span class='line'>    <span class="n">dispatch_source_set_event_handler</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">timer</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;==================&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="c1">//        dispatch_cancel(self.timer);</span>
</span><span class='line'><span class="c1">//        self.timer = nil;</span>
</span><span class='line'><span class="c1">//    取消定时器</span>
</span><span class='line'><span class="c1">//    启动定时器</span>
</span><span class='line'>    <span class="n">dispatch_resume</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">timer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程(一)]]></title>
    <link href="http://etund.github.com/blog/2015/08/21/duo-xian-cheng-%5B%3F%5D/"/>
    <updated>2015-08-21T22:13:01+08:00</updated>
    <id>http://etund.github.com/blog/2015/08/21/duo-xian-cheng-[?]</id>
    <content type="html"><![CDATA[<h4>简单回顾</h4>

<ul>
<li>iOS中多线程实现有几种方案？

<ul>
<li>首先搞清楚什么是线程，什么是多线程。</li>
<li>Mach是第一个以多线程方式处理任务的系统，因此多线程的底层实现方式是基于Mach的线程的。</li>
<li>开发中很少用Mach级的线程，因为Mach级的的线程没有提供多线程的基本特征线程之间是独立的。</li>
<li>基本实现

<ul>
<li>pthead，纯C，手动管理生命周期</li>
<li>NSThread，OC，面向对象。手动管理内存</li>
<li>GCD，纯C，自动管理生命周期，大中央调度，要理解队列与任务，任务在队列里面去除遵循先进先出的准则。</li>
<li>NSOperation,OC，基于GCD的封装，自动管理生命周期，把操作(NSOperation)放进队列(NSOperationQueue)里面，里面的额操作会异步执行。</li>
</ul>
</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><p>线程间怎么通信？</p>

<ul>
<li>perfromSelectior:onThead:withObjecti:waitUntilDone:</li>
<li>NSMachPort(在RunLoop里面的source0和source1里面)</li>
</ul>
</li>
<li><p>cocoa常见的多线程实现</p>

<ul>
<li>只有在主线程刷新访问UI</li>
<li>如果要保证属性的线程安全（atomic）</li>
<li>如果一部操作要保证线程安全等问题，尽量使用GCD</li>
<li>如果想要定时器精确，用GCD定时器</li>
</ul>
</li>
<li><p>GCD内部实现</p>

<ul>
<li>iOS和OSX的黑心是XNU内核，GCD是基于XNU内核实现的</li>
<li>GCD的API全部在libdiPatch库中</li>
<li>GCD的底层实现主要有DispatchQueue和DispatchSource

<ul>
<li>DispatchQueue:管理block(操作)</li>
<li>DispatchSource:处理事件(MACH端口发送，MACH端口接收，监测与进程的事件的10种事件)</li>
</ul>
</li>
</ul>
</li>
<li><p>NSOperation相对于GCD的优点</p>

<ul>
<li>面向对象</li>
<li>封装性好</li>
<li>提供便利的方法</li>
<li>支持KVO,可以监测operation是否正在执行(isExecuted),是否结束(isFinished)，是否取消(isCancled)</li>
<li>GCD的执行速度比NSOperationQueue快</li>
<li>选择

<ul>
<li>任务需要依赖或者要监听任务的执行情况，用NSOperationQueue</li>
</ul>
</li>
<li>在使用GCD的时候要防止循环引用

<ul>
<li>ARC:_weak_unsafe_unretained</li>
<li>MRC:_block</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
