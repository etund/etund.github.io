<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 积累，UINavigation | etund喔喔喔]]></title>
  <link href="http://etund.github.com/tags/ji-lei-,uinavigation/atom.xml" rel="self"/>
  <link href="http://etund.github.com/"/>
  <updated>2015-09-05T20:38:34+08:00</updated>
  <id>http://etund.github.com/</id>
  <author>
    <name><![CDATA[etund]]></name>
    <email><![CDATA[a925813235z@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UINavigation日常Bug]]></title>
    <link href="http://etund.github.com/blog/2014/02/26/uinavigationri-chang-bug/"/>
    <updated>2014-02-26T19:59:31+08:00</updated>
    <id>http://etund.github.com/blog/2014/02/26/uinavigationri-chang-bug</id>
    <content type="html"><![CDATA[<h3>UINavigation日常Bug</h3>

<ul>
<li>今天整理公司项目的时候,发现一个Bug，挺有意思的，就是在你不断调用Navigation<code>- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated;</code>方法的时候，发现在不断点击一个按钮来调用这个方法，在点击返回调用<code>- (UIViewController *)popViewControllerAnimated:(BOOL)animated;</code>这个方法，这是在多次点击返回不但没有返回，还多次向Navigition里面添加控制器。</li>
</ul>


<p><img src="/images/blog/UINavigationBug/bug_0.gif" alt="" /></p>

<!-- more -->


<ul>
<li>额，黑苹果录制有点缺陷，自行脑补画面哈。</li>
<li>这是什么问题呢，代码不多，可以看看，那么问题究竟出在哪里呢？</li>
</ul>


<pre><code class="objc">//push
//触发点击事件
[btn addTarget:target action:action forControlEvents:UIControlEventTouchUpInside];

//接收按钮点击处理
- (void)btnClick:(UIButton *)btn{
    [self.navigationController pushViewController:[[ETRecommendController alloc] init] animated:YES];
}

//pop
//触发点击时间
[backBtn addTarget:self action:@selector(pop)
//接受点击事件
- (void)pop{
    [self popViewControllerAnimated:YES];
}
</code></pre>

<ul>
<li>看看现在的分析</li>
<li>我想点击push就调用push方法，返回就调用pop，并且只调用一次。</li>
<li>现在点击push的确是显示一次，点击pop的时候，明显的看到添加了好多子控制器进去,而实际上也的确添加了好多自控器（实际的确如此）</li>
<li>这里我是自定义Navigation的，那么可能是我自定义里面的代码里面写逻辑不对，与系统的冲突，于是换了系统的Navigation，然而结果一样。</li>
<li><p>不得不说一个细节是在按钮的两端点才回出现这个bug,在中间点则一切正常。</p></li>
<li><p>于是乎我发现在接受按钮push点击事件的方法调用多次，但是明明看到我还没返回根控制器啊，同时也看到我点击的返回按钮啊，突然间我发现我是这样调用push方法的<code>[self.navigationController pushViewController:[[ETRecommendController alloc] init] animated:YES];</code>注意后面的<code>animated:YES</code>Navigation的跳转带动画效果，而这个动画效果是通过CoreAnimation的专场动画来实现的，而动画的需要时间，而在RunLoop里面的NSDispalyLink与NStimer那么如果在一定时间内没有执行完任务会自动跳过，而现在会不会类似这样呢，毕竟是都是基于线程运行的，而线程的架构模式又是RunLoop,亦即是说<code>执行动画需要时间，在这个时间里面没有执行完动画，那么RunLoop直接处理下一个Source</code>。</p></li>
<li><p>额&hellip;，如果是这样的话，那么直接把动画设为NO就行了吧，于是把YES换成NO，的确，一点问题也没有，问题这样似乎是解决了，请留意我上面说的一个细节。</p></li>
<li><p><code>在按钮的两端点才回出现这个bug,在中间点则一切正常</code>
<img src="/images/blog/UINavigationBug/bug_1.gif" alt="" /></p></li>
<li><p>如果说在两端和中间点击的效果一样的话，这样动画的YES和NO就很有说服力了，但是现在明显不是。</p></li>
<li><p>于是乎现在又是这样一个状况</p>

<ul>
<li><p>在我们点击过去的时候，push键(非返回键)动画效果的时候，变成了这样一个局势：中间的一个模块不能接收相应，而周围可以，也就是说，中间和周围不是同一块控件，毕竟根据响应者链条，寻找最合适的View，所以，如果能接收事件那他一定是同一块View，除非他不遵循响应者链条，而现在就是这个局势，一个控件居然不遵循响应者链条，好吧，这个猜想有点大胆，理由也比较勉强。</p></li>
<li><p>这里需要普及一下苹果的一些细节的知识，在我们点击iPhone键盘的时候，例如我点击了g，那么苹果会从他系统自带的猜词字典里面猜想我们下一个会按什么，这是可能是good，也可能是god，但是可以肯定的是o的触控范围一定比某一些字母的触控范围大，也就是说虽然我们看起来键盘一直没有变化，他的每个字母能接受事件的范围永远都在动态变化的，这也是苹果用户体验比较好的一个细节。</p></li>
<li><p>行了，有了上面的小提示，你应该想到我接下来要讲什么了吧，就是我们的返回按钮的接收事件的范围会被放大，当然这只是我的一个猜想，那么如果我的猜想成功的话，现在就是这个局势，中间一个push键的确push后不能点击，但是他的响应范围被放大了，所以就形成了中间点击正常，边框点击会调用push方法，这样猜想貌似合理，这种猜想与上面的那种猜想结合起来应该会比较合理，但是毕竟是猜想。</p></li>
</ul>
</li>
<li><p>至于解决方案，很简单，我猜你也想到了，不过为什么会出现这个bug，这才是最重要的，至少求学态度没有错，解决方案：大体是：</p>

<ul>
<li>如果是自定义Navigation的话，可以在重写的push方法里面检查navigation里面是否已经存在了这个控制器。</li>
</ul>
</li>
</ul>


<pre><code class="objc">    - (BOOL)checkIsExit:(id)VC{
    for (id classObj in self.childViewControllers) {
        Class class = [classObj class];
        if ([VC isKindOfClass:class]) {
            return YES;
        }
    }
    return NO;
}
</code></pre>

<ul>
<li>如果是系统的话，可以在navigation的childrenControllers的count的变化的时候判断是否取出最后一个，这里可能会用到KVC，需要提醒的是，系统的KVO并不是对一切属性都可用的，如果是使用Swift的话推荐一个第三方框架<code>Observable-Swift</code>，这个框架很好的利用了Swift的泛型，如果的OC，自行到github上寻找框架。</li>
</ul>

]]></content>
  </entry>
  
</feed>
