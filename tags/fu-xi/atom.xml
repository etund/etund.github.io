<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 复习 | etund喔喔喔]]></title>
  <link href="http://etund.github.com/tags/fu-xi/atom.xml" rel="self"/>
  <link href="http://etund.github.com/"/>
  <updated>2015-09-05T20:34:53+08:00</updated>
  <id>http://etund.github.com/</id>
  <author>
    <name><![CDATA[etund]]></name>
    <email><![CDATA[a925813235z@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅拷贝与深拷贝]]></title>
    <link href="http://etund.github.com/blog/2014/08/22/qian-kao-bei-yu-shen-kao-bei/"/>
    <updated>2014-08-22T14:15:33+08:00</updated>
    <id>http://etund.github.com/blog/2014/08/22/qian-kao-bei-yu-shen-kao-bei</id>
    <content type="html"><![CDATA[<h4>深拷贝与浅拷贝</h4>

<ul>
<li>浅拷贝是指针拷贝，深拷贝是内容拷贝</li>
<li>产生新对象的时深拷贝，不产生新对象的时浅拷贝</li>
<li><p>浅拷贝只是对对象的简单拷贝，让几个对象公用一片内存，当内存销毁的时候，只想这片内存的额几个指针需要重新定义才可以使用，要不然会变成野指针。</p></li>
<li><p>NString与copy(不产生新对象，浅拷贝，指针拷贝)</p></li>
</ul>


<pre><code class="objc">    NSString *str = @"00000000000";
    NSString *str_0 = [str copy];
    NSLog(@"%p---------%p",str,str_0);
    /**输出结果
    2015-08-22 12:42:24.992 Text[1143:32063] 0x10128c7d0---------0x10128c7d0
    */
</code></pre>

<!-- more -->


<ul>
<li>NString与mutableCopy(产生新对象，深拷贝，内容拷贝)</li>
</ul>


<pre><code class="objc">    NSString *str = @"00000000000";
    NSString *str_0 = [str mutableCopy];
    NSLog(@"%p---------%p",str,str_0);
    /**输出结果
    2015-08-22 12:44:39.582 Text[1183:33573] 0x1042cb7d0---------0x7f9bf401a910
    */
</code></pre>

<ul>
<li>NSMutableString与copy(产生新对象，深拷贝，内容拷贝)</li>
</ul>


<pre><code class="objc">    NSMutableString *str = [[NSMutableString alloc] initWithString:@"-----------"];
    NSMutableString *str_0 = [str copy];
    NSLog(@"%p---------%p",str,str_0);
    /**输出结果
    2015-08-22 12:47:06.886 Text[1219:34965] 0x7fa5e26107d0---------0x7fa5e260fc00
    */
</code></pre>

<ul>
<li>NSMutableString与copy(产生新对象，深拷贝，内容拷贝)</li>
</ul>


<pre><code class="objc">    NSMutableString *str = [[NSMutableString alloc] initWithString:@"-----------"];
    NSMutableString *str_0 = [str mutableCopy];
    NSLog(@"%p---------%p",str,str_0);
    /**输出结果
    2015-08-22 12:48:26.251 Text[1247:36136] 0x7f8450725d40---------0x7f8450738150
    */
</code></pre>

<ul>
<li>小结：

<ul>
<li>NS<em> 调用copy方法是浅拷贝，调用mutableCopy方法是深拷贝，NSMutable</em> 调用mutableCopy和copy是深拷贝。</li>
<li>浅拷贝，在ARC中，由于自动管理内存，使用retain关键字进行引用计数，就是一种更加保险的浅拷贝，它既让几个指针共用同一片内存空间，又可以在release由于计数的存在，不会轻易的销毁内存，达到更加建档使用的目的</li>
<li>深拷贝是指拷贝对象的具体内容，而内存地址是自主分配的，拷贝结束之后，两个对象虽然存在的值是相同的，但内存地址不一样，两个对象也互不影响，互补干涉。</li>
</ul>
</li>
</ul>


<p><img src="/images/blog/qiancopyyushenkaobei/Snip20150822_2.png" alt="" /></p>

<h4>拷贝构造</h4>

<ul>
<li>在ios中不不是所有的对象原始就支持copy和mutableCopy，即使你可以调用这个方法且编译通过，但是在运行的时候会提示找不到方法copywithzone 或者 mutableCopyWithZone。所以如果其他类也想实现深拷贝或者浅拷贝的时候，要遵循NSMutableCopying或者NSCopying协议并且实现copyWithZone或者mutableCopyWithZone方法来实现深拷贝或浅拷贝。</li>
<li>举个栗子

<ul>
<li>没有实现copying的时候对AClass的实例进行copy,编译通过,但是运行报错
<img src="/images/blog/qiancopyyushenkaobei/Snip20150822_1.png" alt="" /></li>
<li>接下来我们来继承NSCopying协议并且实现对应的方法</li>
</ul>
</li>
</ul>


<pre><code class="objc">- (id)copyWithZone:(NSZone *)zone{
    AClass *aclass = [[self class] allocWithZone:zone];
    aclass.name = [_name mutableCopy];
    aclass.age = _age;
    return aclass;
}
</code></pre>

<ul>
<li>之后在运行之前的代码</li>
</ul>


<pre><code class="objc">    AClass *aclass = [[AClass alloc] init];
    aclass.name = @"00000000";
    aclass.age = 10;
    AClass *aclass_0 = [aclass copy];
    NSLog(@"%@--------------%@",aclass,aclass_0);
    /*输出结果
    2015-08-22 14:07:11.509 Text[4180:74165] &lt;AClass: 0x7f91932298c0&gt;--------------&lt;AClass: 0x7f9193229770&gt;
    */
</code></pre>

<ul>
<li>小结：至于NSCopying同理。</li>
</ul>


<h4>参考文章</h4>

<ul>
<li><a href="http://www.cocoachina.com/ios/20141113/10213.html">Objective-C中的浅拷贝和深拷贝</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程(一)]]></title>
    <link href="http://etund.github.com/blog/2013/09/21/duo-xian-cheng-%5B%3F%5D/"/>
    <updated>2013-09-21T22:13:01+08:00</updated>
    <id>http://etund.github.com/blog/2013/09/21/duo-xian-cheng-[?]</id>
    <content type="html"><![CDATA[<h4>简单回顾</h4>

<ul>
<li>iOS中多线程实现有几种方案？

<ul>
<li>首先搞清楚什么是线程，什么是多线程。</li>
<li>Mach是第一个以多线程方式处理任务的系统，因此多线程的底层实现方式是基于Mach的线程的。</li>
<li>开发中很少用Mach级的线程，因为Mach级的的线程没有提供多线程的基本特征线程之间是独立的。</li>
<li>基本实现

<ul>
<li>pthead，纯C，手动管理生命周期</li>
<li>NSThread，OC，面向对象。手动管理内存</li>
<li>GCD，纯C，自动管理生命周期，大中央调度，要理解队列与任务，任务在队列里面去除遵循先进先出的准则。</li>
<li>NSOperation,OC，基于GCD的封装，自动管理生命周期，把操作(NSOperation)放进队列(NSOperationQueue)里面，里面的额操作会异步执行。</li>
</ul>
</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><p>线程间怎么通信？</p>

<ul>
<li>perfromSelectior:onThead:withObjecti:waitUntilDone:</li>
<li>NSMachPort(在RunLoop里面的source0和source1里面)</li>
</ul>
</li>
<li><p>cocoa常见的多线程实现</p>

<ul>
<li>只有在主线程刷新访问UI</li>
<li>如果要保证属性的线程安全（atomic）</li>
<li>如果一部操作要保证线程安全等问题，尽量使用GCD</li>
<li>如果想要定时器精确，用GCD定时器</li>
</ul>
</li>
<li><p>GCD内部实现</p>

<ul>
<li>iOS和OSX的黑心是XNU内核，GCD是基于XNU内核实现的</li>
<li>GCD的API全部在libdiPatch库中</li>
<li>GCD的底层实现主要有DispatchQueue和DispatchSource

<ul>
<li>DispatchQueue:管理block(操作)</li>
<li>DispatchSource:处理事件(MACH端口发送，MACH端口接收，监测与进程的事件的10种事件)</li>
</ul>
</li>
</ul>
</li>
<li><p>NSOperation相对于GCD的优点</p>

<ul>
<li>面向对象</li>
<li>封装性好</li>
<li>提供便利的方法</li>
<li>支持KVO,可以监测operation是否正在执行(isExecuted),是否结束(isFinished)，是否取消(isCancled)</li>
<li>GCD的执行速度比NSOperationQueue快</li>
<li>选择

<ul>
<li>任务需要依赖或者要监听任务的执行情况，用NSOperationQueue</li>
</ul>
</li>
<li>在使用GCD的时候要防止循环引用

<ul>
<li>ARC:_weak_unsafe_unretained</li>
<li>MRC:_block</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
