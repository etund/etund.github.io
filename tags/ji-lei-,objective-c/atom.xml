<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 积累，Objective-c | etund喔喔喔]]></title>
  <link href="http://etund.github.com/tags/ji-lei-,objective-c/atom.xml" rel="self"/>
  <link href="http://etund.github.com/"/>
  <updated>2015-09-05T20:34:53+08:00</updated>
  <id>http://etund.github.com/</id>
  <author>
    <name><![CDATA[etund]]></name>
    <email><![CDATA[a925813235z@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C_Runtime(二)]]></title>
    <link href="http://etund.github.com/blog/2014/07/28/objective-c-runtime-er/"/>
    <updated>2014-07-28T19:43:52+08:00</updated>
    <id>http://etund.github.com/blog/2014/07/28/objective-c-runtime-er</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/Objective-c-Runtime/1436240778601754.jpg" alt="" /></p>

<h3>动态方法解析</h3>

<h4>动态方法解析</h4>

<ul>
<li>这里描述怎样动态提供一个方法的实现</li>
<li>有时候需要动态的提供一个方法的实现，例如OC中属性Property</li>
</ul>


<pre><code class="objc">￼￼￼￼@dynamic propertyName;
</code></pre>

<ul>
<li>表示编译器须动态的生成该属性对应的方法，<code>注意：￼￼￼￼@dynamic与@property一样都可以自动生成setter和getter方法，知识@property是编译阶段生成的，而@dynamic是手工生成或者运行时自动生成。</code></li>
<li>此外，还可以通过实现resolveInstanceMethod;和resolveeClassMethod；来动态地实现给定选标的对象方法或者类方法。</li>
<li>OC方法可以认为是至少两个参数的self和_cmd的C函数。你可以通过class_andMethod方法讲一个函数加入到类的方法中。例如，有如下函数：</li>
</ul>


<!-- more -->


<pre><code class="objc">void dynamicMethodIMP(id seld,SEL _cmd){
    //DOSomething
}
</code></pre>

<ul>
<li>你可以通过resolveInstanceMethod:讲它作为resolveThisMethodDynamically的实现</li>
</ul>


<pre><code class="objc">+ (BOOL)resolveInstanceMethod:(SEL)aSEL{
    if (aSEL == @selector(resolveThisMethodDynamically)){
        class_addMethod([self class],aSEL,(IMP)dynamicMethodIMP,"v@");
        return YES;
    }
    return [super resolveInstanceMethod:aSEL];
}
</code></pre>

<ul>
<li>这是你可能会想到如果我消息已经发送出去了，然后再添加方法那不是没用，所以文档里面也锁了，消息转发和动态方法解析是互补相干的，在进入消息转发机制之前，respondsToSelector:和instancesRespondToSelector:会被首先调用。你可以在两个方法中为传进来的选标提供一个IMP.如果你实现了resolveInstanceMethod：方法但是仍然希望正常的消息转发机制进行，你只需要返回NO就可以了。</li>
</ul>


<h4>动态加载</h4>

<ul>
<li>动态加载其实很简单，例如我们在设置中要查看我们的手机存储空间，那么就是在我们想要看得时候，它采取加载，而，官方给出的解释比较拗口，即使翻译过来了还是比较生涩：Objective-C 程序可以在运行时链接和载入新的类和范畴类。新载入的类和在程序启动时载入的类并没有区别。意思就是说要用到时在加载，其实抛开这个局限来说，很多地方都用到这种动态加载的思想，可能就是叫法不同，例如，我们在iOS中经常用到的懒加载，以及控制器的view的懒加载，再如，Java中得Hibernate中的数据库load方法的懒加载，用到时再加载到内存中。这种思想在一定程度上节省了资源。</li>
<li>在回到OC，尽管已经有RunTime系统的函数动态加载Mach-O文件中的Objective-C模块(objc_loadModules,在objc/objc-load.h中定义),但是Cocoa的NSBundle类为动态加载提供了一个更为方便的借口哦——一个面向对象，已知相关服务集成的接口。</li>
</ul>


<h3>消息转发</h3>

<h4>消息转发</h4>

<ul>
<li>如果一个对象受到一条无法处理的消息，运行时系统会在抛出错误前，给该对象发送一条是forwardInvocation:消息，该消息的唯一参数是个NSInvocation类型的对象，该对象封装了原始的消息和消息的参数。</li>
<li>你可以实现forwardInvocation:方法来对不能处理的消息做一些默认的处理，也可以一其他的某种方式来避免错误的抛出。如forwardInvocation:的名字所示，它通常用来将消息转发给其他的对象。</li>
<li>关于消息转发的作用,您可以考虑如下情景:假设,您需要设计一个能够响应 negotiate 消息的对象, 并且能够包括其它类型的对象对消息的响应。 通过在 negotiate 方法的实现中将 negotiate 消息 转发给其它的对象来很容易的达到这一目的。
<code>上面这段话的内容是只建一个类似于中介的类(这个类有实现negotiate方法)，然后把这个forward的消息转发给你想要转发的类</code></li>
<li>更进一步,假设您希望您的对象和另外一个类的对象对negotiate的消息的响应完全一致。一种可能的 方式就是让您的类继承其它类的方法实现。 然后,有时候这种方式不可行,因为您的类和其它类可能需要在不同的继承体系中响应 negotiate 消息。
<code>上面这句话只是对上上一句话换一种说法而已，意思就是说，如果你得对象和另外一个类对象对neGotiate的消息响应一致(也就是实现一致，响应的方式一致)，你就要继承能响应这个消息的类，但是这种工程是庞大的，因为你要在每个继承体系中响应这个消息</code></li>
<li>然而即使你不能通过继承来继承这个实现，你也可以自定义一个negotiate实现来响应这个消息,(当然这种方法对于很多类来说是不可取的，工作量太大了),而这个消息只是转发消息而已，就像一开始举得例子一样</li>
</ul>


<pre><code class="objc">- negotiate{if ( [someOtherObject respondsTo:@selector(negotiate)] )return [someOtherObject negotiate];return self;}
</code></pre>

<ul>
<li><p>如上所说，这种方法在很多方法的时候是不可取的，此外，当你写完代码的时候，你可以处理的消息就已经去顶的，意思就是不能处理位置的消息，而且你得类以及方法表都是确定的，但是根据上面动态方法解析可以知道，有些方法和类是动态加载的。</p></li>
<li><p>forwardInvocation:消息给这个问题提供了一个更特别的,动态的解决方案:当一个对象由于没有 相应的方法实现而无法响应某消息时,运行时系统将通过 forwardInvocation:消息通知该对象。每 个对象都从 NSObject 类中继承了 forwardInvocation:方法。然而,NSObject 中的方法实现 只是简单地调用了 doesNotRecognizeSelector:,所以就出现了我们经常遇到的问题,unreconizeSelector send to &hellip;. 就是找不到方法的意思</p></li>
<li>此外，我们也可以通过自己实现forwarfInvocation方法来实现我们的消息转发，但是正如一开始说的，我们发送消息，必须包含方法调用者，消息以及其包含的参数</li>
<li>至于转发的具体实现，我们可以通过invokeWithTarget:方法来转发</li>
</ul>


<pre><code class="objc">- (void)forwardInvocation:(NSInvocation *)anInvocation{if ([someOtherObject respondsToSelector:[anInvocation selector]])[anInvocation invokeWithTarget:someOtherObject];else[super forwardInvocation:anInvocation];￼}
</code></pre>

<ul>
<li>转发消息后返回值将返回给原来的额消息发送者，所以你可以返回任何类型的返回值</li>
<li>forwardInvocation:就像一个不能识别的消息分发中心，你可以将这些消息分发给不同的对象，也可以分发给同一个对象，也可以不做任何事，就是吃掉，因此没有响应也没有错误。forwardInvocation:也可以对不同的消息提供同样的响应，这一切都取决于方法的具体实现。
<code>值得注意的是，forwardInvocation:方法只有在消息对象无法啊正常响应的时候调用，因此如果你想调用某个对象的某个方法，那么某个对象的一定不能有则个方法，否者forwardInvocation:将不可能被调用</code></li>
</ul>


<h4>消息转发和多重继承</h4>

<ul>
<li>当我看到这个的时候要我接受我是拒绝的，这按照常规真的很难理解，但是仔细想想，这并不是真正的多重继承，只是模拟多重继承而已，当然这个前提是你已经理解消息转发，也就是上面我说的。</li>
</ul>


<p><img src="/images/blog/Objective-c-Runtime/forwarding.gif" alt="消息转发" /></p>

<ul>
<li>如图所示，Warrior里面把调用negotiate方法的消息转发给Diplomat,也可以这样说，Warrior间接调用了Diplmat，而Warrior有自己的继承体系，而Diplomat也有自己的继承体系，所以这样就可以看做是Warrior模拟出了多重继承的效果</li>
<li>消息转发提供了多重继承的很多特性，然而多重继承是讲不通的行为封装到单个对象中，有可能导致很庞大，复杂的对象，而且有些不必要的方法也继承过来了，没必要的庞大。而消息转发是将问题分解到更小的对象中，但是又以一种对消息发送对象来说完全透明的方式将这些对象联系起来。</li>
</ul>


<h4>消息代理对象</h4>

<ul>
<li>消息转发不仅和继承很象,它也使得以一个轻量级的对象(消息代理对象)代表更多的对象进行消息处理成为可能。</li>
<li>远程消息的代理类就是这样一个代理对象，代理类负责将消息转发给远程消息接收对象的管理细节，也就是说，保证消息参数的传输，他没有进一步复制远程对象，只是把远程对象的映射到本地的地址，也就是说，显示接收你远程消息的对象并没有真正处理消息对象的方法，他只是将消息转发给真正处理的额类。</li>
<li>同时也存在其他类型的消息代理对象。例如，假设你有个对象需要操作大量数据&mdash;他需要从一个复杂的图片或者需要从磁盘上附一个文件上的内容，而创建一个这样的一个对象有很费时间费资源，这样就可能需要推迟他的创建时间&mdash;&mdash;-知道它真正需要是，或者系统资源空闲是再来加载这个方法。同时你有需要至少有一个预留的对象和其他对象和其他对象交互。<code>简而言之，也是懒加载，首先要知道的时我们利用forwardInvocation:来转发消息在真正执行到这一句之前，里面的代码是没有加载到内存，只有在执行过程中真正找不到方法才能加载里面的代理进内存</code></li>
<li>在这种情况下,你可以为该对象创建一个轻量的代理对象。该代理对象可以有一些自己的功能,例如响应数据查询消息,但是它主要的功能是代表某个对象,当时间到来时,将消息转发给被代表的对象。当代理对象的 forwardInvocation:方法收到需要转发给被代表的对象的消息时,代理对象会保证所代表的 对象已经存在,否则就创建它。所有发到被代表的对象的消息都要经过代理对象,对程序来说,代理对象 和被代表的对象是一样的。</li>
</ul>


<h4>消息转发和类继承</h4>

<ul>
<li>尽管消息转发很像继承，但他不是继承，例如在NSObject类中，方法respondsToSelector:和isKindOfClass:只会出现在继承链中，而不是消息转发链中。例如，如果向Warrior类的对象询问他能否响应negotiate消息。</li>
</ul>


<pre><code class="objc">if ( [aWarrior respondsToSelector:@selector(negotiate)] )
</code></pre>

<ul>
<li>返回值是NO，尽管该对象能够接受和响应negotiate，但部分情况下，NO是正确的响应。但不是所有时候都是的，例如，如果你使用消息转发来创建一个代理，对象易扩展某个类的能力，这儿的消息转发必须和继承一样，尽可能地对用户透明，如果你希望你的代理对象看起来就像是继承自它代表的对象，一样，你需要重新实现respondsToSelector:和isKindOfClass:方法</li>
</ul>


<pre><code class="objc">- (BOOL)respondsToSelector:(SEL)aSelector{if ( [super respondsToSelector:aSelector] )return YES;else {/* Here, test whether the aSelector message can ** be forwarded to another object and whether that ** object can respond to it. Return YES if it can. */}return NO;￼}
</code></pre>

<ul>
<li>除了respondsToSelector:和isKindOfClass:外，instancesRespondToSelector:方法也必须重新实现。如果你是用的是协议类，需要重新实现的还有conformsToProtocol:方法。类似的，如果对象需要转发远程消息，择methodSignatureForSelector:方法必须能够返回实际响应消息的方法的描述，例如，如果对象需要将消息转发给他所代表的对象，你可能需要如下的methodSignatureForSelector:实现</li>
</ul>


<pre><code class="objc">- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector{NSMethodSignature* signature = [super methodSignatureForSelector:selector];if (!signature) {signature = [surrogate methodSignatureForSelector:selector];
}return signature;￼}
</code></pre>

<p><code>您也可以将消息转发的部分放在一段私有的代码里,然后从 forwardInvocation:调用它。</code>
<code>注意: 消息转发是一个比较高级的技术,仅适用于没有其它更好的解决办法的情况。它并不是用来代替 继承的。如果您必须使用该技术,请确定您已经完全理解了转发消息的类和接收转发消息的类的行为。</code></p>

<h3>其他</h3>

<ul>
<li>除了上面提到的，运行时模块还包括<code>类型编码</code>和<code>属性声明</code>，在<code>属性声明</code>里面有我们经常用到的class_copyPropertyList和protocol_copyPropertyList用来运行时获取私有属性的。</li>
</ul>


<h3>总结</h3>

<ul>
<li>其实OC成为一门动态的语言，就是应为它的运行时，从其本，Objective-C语言将决定尽可能的从编译和连接时推迟到运行时，只要有可能Objective-C总是使用动态的方式来解决问题，所以运行时整个文档中可以看中OC的Runtime懒懒的感觉，就是因为动态为其提供灵活性。</li>
<li>Runtime我觉得<code>消息转发</code>这个模块比较重要，也比较难懂，只要理解了，整个文档看起来就不会太难了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C_Runtime(一)]]></title>
    <link href="http://etund.github.com/blog/2014/07/24/objective-c-runtime-%5B%3F%5D/"/>
    <updated>2014-07-24T01:16:29+08:00</updated>
    <id>http://etund.github.com/blog/2014/07/24/objective-c-runtime-[?]</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/Objective-c-Runtime/1436240778601754.jpg" alt="" /></p>

<h3>前言</h3>

<ul>
<li>此博文仅仅用于本人的读书笔记，一切以官方的为准<a href="https://developer.apple.com/library/prerelease/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">官方文档</a></li>
<li>Objective-C语言将决定尽可能的从编译和连接时推迟到运行时，只要有可能Objective-C总是使用动态的方式来解决问题。这意味着Objective-C语言不仅需要一个编译器，同时也需要一个运行时系统来执行编译好的代码。这儿的运行时系统扮演的角色类似于Objective-C语言的操作系统，Objective-C基于该系统来工作。</li>
</ul>


<!-- more -->


<h3>和Runtime系统的交互</h3>

<ul>
<li>Objective-C程序有三种途径各运行时系统交互

<ul>
<li>通过Objective-C源代码：意思就是你自己写代码发消息，然后在编译的时候，编译器为实现语言动态特性将自动创建一些数据结构和函数，而这些数据结构就包含类定义和协议类定义中的信息，如类的对象，协议类的对象，方法选标，实例变量模板，以及其他来自于源代码的信息。运行时系统的主要功能就是根据源代码中得表法师发送消息。</li>
<li>通过Foundation框架中NSObject的方法:由于Cocoa框架里面大多数类是集成自NSObject，而NSObject里面有很多方法都是可以在运行时获取动态信息，例如，NSObject的一个description方法，它不知道子类子类的详细信息，所以它直接返回类的名字和对象的地址，子类可以重写该方法来返回更多的信息，例如NSArray，他就把NSArray包含的每个类的内容返回，类似的方法还有isKindOfClass，isMemberOfClass等等一些允许对象在一定程度上自我检查的方法，意思就是说，NSObject提供了很多在运行时获取信息的方法来让我们去调用去拓展。</li>
<li>通过直接调用运行时系统的函数：运行时系统是一个有公开接口的动态库，有一些数据结构和函数的集合组成，使用时要导包#import &lt;objc/runtime.h>，这些函数是的访问运行时系统借口和提供开发工具成为肯呢过，虽然他们对程序不是必须得，但是有时候对于OC程序来说某些函数是非常有用的，例如我们经常用到的，用来获取一个类的私有属性的时候用到的方法</li>
</ul>
</li>
</ul>


<pre><code class="objc">unsigned count;
    Ivar * ivars = class_copyIvarList([&lt;#Class#&gt; class], &amp;count);
    for (Ivar *p = ivars; p &lt; ivars + count; p++) {
        Ivar const ivar = *p;
        NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];
        NSLog(@"%@",key);
    }
</code></pre>

<h3>消息</h3>

<h4>获取方法地址</h4>

<ul>
<li>避免动态绑定的唯一办法就是去的方法的地址，当一个方法会被连续调用很多次，而且你希望节省每次调用方法都要发送消息的开销时，使用方法地址来调用就显得很有效。</li>
<li>利用NSObject类中得methodForSelector:方法，你可以获得一个指向<code>方法实现</code>的指针，并且可以使用该指针直接调用方法实现。methodForSelector:返回的指针和复制的变量类型必须完全一致，包括方法的参数诶性和返回值类型都在类型识别的考虑范围中。</li>
</ul>


<pre><code class="objc">void (*setter)(id , SEL,BOOL);//这里类似于Block Block是指向结构体的指针，这是指向函数的指针
int i;
setter = (void (*) (id,SEL,BOOK))[target methodForSelector:@selector(setFilled)];
for (i = 0 ; i &lt; 1000 ; i++)
setter(target,@selector(setFilled:) ,YES);
</code></pre>

<ul>
<li>方法指针的第一个参数是接受消息的对象(self),第二个参数是方法选标(_cmd),这两个参数在方法中是隐藏参数，但使用函数的形式来调用方法是必须显示的给出。</li>
<li>使用methodForSelector:来避免动态绑定讲较少大部分消息的开销，但是这只有在制定的消息被重复发送很多次是才有意义。
<code>注意,methodForSelector:是 Cocoa 运行时系统的提供的功能,而不是 Objective-C 语言本身的功 能。</code></li>
</ul>


<h4>objc_msgSend函数</h4>

<ul>
<li>在Objective-C中，消息是知道运行的事后彩盒方法实现绑定的，编译器会把一个消息表达式</li>
</ul>


<pre><code class="objc">[receiver messgae]
</code></pre>

<ul>
<li>转换成一个对消息函数objc_msgSend的调用，干函数有两个主要参数，消息接受者和消息对应的名字&mdash;也就是方法的选标，也就是上面所说的指向函数的指针。</li>
</ul>


<pre><code class="objc">objc_msgSend(receiver, selector)
</code></pre>

<ul>
<li>同时接收消息中得任意数目的参数，返回的指针和复制的变量类型必须完全一致，包括方法的参数诶性和返回值类型都在类型识别的考虑范围中。</li>
</ul>


<pre><code class="objc">￼￼￼￼objc_msgSend(receiver, selector, arg1, arg2, ...)
</code></pre>

<ul>
<li>该消息函数做了动态绑定所需要得一切

<ul>
<li>他首先找到选标对应的方法实现。</li>
<li>然后讲消息接受者对象 ，以及方法中制定的参数传给找到的方法实现</li>
<li>最后讲方法实现的返回值作为该函数的返回值返回,<code>注意:编译器将自动插入调用该消息函数的代码。您无须在代码中显示调用该消息函数。消息机制的关键在于编译器为类和对象生成的结构。每个类的结构中至少包括两个基本元素:(self和_cmd)</code></li>
<li>指向父类的指针。</li>
<li>类的方法表。方法表讲方法选标和该类的方法实现地址以key-value的方式存起来。</li>
</ul>
</li>
<li>当新的对象被创建是，其内存同时被分配，实例变量也同时被初始化。对象的<code>第一个实例变量</code>是一个指向该对象的类结构的指针，叫做isa，通过该指针对象可以访问他对应类以及相应的父类。
<code>注意：尽管严格来说这并不是Objective-C语言的一部分，但是在Objective-C运行时系统中对象需要有isa指针。对象和结构体struct objc_object(在objc/objc.h中定义)必须一致，燃和你很少需要创建你自己的跟对象，因为从NSObject或者NSProxy继承的对象都自动包括isa变量</code></li>
</ul>


<p><img src="/images/blog/Objective-c-Runtime/messaging1.gif" alt="消息框架" /></p>

<ul>
<li>当对象收到消息后，消息函数首先根据对象的isa指针找到该对象所对应累的方法表，并从表中寻找该消息对应的方法选标。如果找不到，objc_msgSend将继续从父类中找，知道NSObject类。一旦找到方法，一旦找到方法选标，objc_msgSend则以消息接收者对象为参数调用，调用该选标对应的方法实现。这就是在运行时系统徐哲方法实现的方式，在面向对象编程中(例如java编程),一般承租方法和消息动态绑定的过程。</li>
<li>为了加快消息的处理过程，运行时系统通常会讲使用过的方法选标和方法实现的地址翻入缓存，如果一个方法被使用过一次，那么它很有可能被再次使用，如果缓存中已经有了需要的方法选标，则消息仅仅比函数调用慢一点点，如果程序运行了足够长的时间，几乎每个消息都能在混村中找到那方法实现。程序运行时，混存也将随着新的消息的增加而增加。</li>
</ul>


<h4>使用隐藏参数</h4>

<ul>
<li>当objc_msgSend找到方法对应的实现时，它将直接调用该方法实现，并将消息中所有的参数搜传递给方法实现，同时它还将传递两个隐藏的参数：(self和_cmd)，具体怎么调用这两个隐藏参数，请看以下代码。</li>
</ul>


<pre><code class="objc">- strange{id target = getTheReceiver();SEL method = getTheMethod();if ( target == self || method == _cmd )return nil;return [target performSelector:method];￼}
</code></pre>

<h3>参考博文</h3>

<p><a href="http://blog.devtang.com/blog/2013/04/29/the-missing-objc-keywords/">那些被遗漏的Objective-C保留字</a></p>

<p><a href="http://onevcat.com/2012/04/objective-c-runtime/">深入Objective-C的动态特性</a></p>
]]></content>
  </entry>
  
</feed>
